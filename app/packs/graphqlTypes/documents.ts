import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of AdminArbitragerWithrawBalanceMutation */
export type AdminArbitragerWithrawBalanceMutationInput = {
  mixinUuid: Scalars['ID'];
  assetId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminLoginMutation */
export type AdminLoginMutationInput = {
  name: Scalars['String'];
  password: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminRankMarketMutation */
export type AdminRankMarketMutationInput = {
  marketId: Scalars['ID'];
  position: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminRecommendMarketMutation */
export type AdminRecommendMarketMutationInput = {
  marketId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AdminUnrecommendMarketMutation */
export type AdminUnrecommendMarketMutationInput = {
  marketId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Administrator = {
  __typename?: 'Administrator';
  createdAt: Scalars['ISO8601DateTime'];
  name: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type AppStatistic = {
  __typename?: 'AppStatistic';
  createdAt: Scalars['ISO8601DateTime'];
  feeTotalUsd: Scalars['Float'];
  groupOwnerCommissionTotalUsd: Scalars['Float'];
  invitationCommissionTotalUsd: Scalars['Float'];
  marketsCount: Scalars['Int'];
  matchTotalUsd: Scalars['Float'];
  unprocessedSnapshotsCount: Scalars['Int'];
  unprocessedTransfersCount: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  usersCount: Scalars['Int'];
  validOrdersCount: Scalars['Int'];
};

export type ArbitrageOrder = {
  __typename?: 'ArbitrageOrder';
  arbitrager?: Maybe<MixinNetworkUser>;
  baseAsset: MixinAsset;
  baseAssetProfit?: Maybe<Scalars['Float']>;
  createdAt: Scalars['ISO8601DateTime'];
  expectedProfit?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  market: Market;
  marketId: Scalars['String'];
  netProfitUsd?: Maybe<Scalars['Float']>;
  profitAsset: MixinAsset;
  quoteAsset: MixinAsset;
  quoteAssetProfit?: Maybe<Scalars['Float']>;
  raw: Scalars['String'];
  state: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for ArbitrageOrder. */
export type ArbitrageOrderConnection = {
  __typename?: 'ArbitrageOrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ArbitrageOrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ArbitrageOrder>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ArbitrageOrderEdge = {
  __typename?: 'ArbitrageOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ArbitrageOrder>;
};

export type BookingOrderActivity = {
  __typename?: 'BookingOrderActivity';
  bonusAsset: MixinAsset;
  bonusAssetId?: Maybe<Scalars['String']>;
  bonusTotal?: Maybe<Scalars['Float']>;
  createdAt: Scalars['ISO8601DateTime'];
  endedAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  market: Market;
  marketId: Scalars['String'];
  scoresTotal: Scalars['Float'];
  startedAt: Scalars['ISO8601DateTime'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  validOrdersCount: Scalars['Int'];
};

/** The connection type for BookingOrderActivity. */
export type BookingOrderActivityConnection = {
  __typename?: 'BookingOrderActivityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookingOrderActivityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BookingOrderActivity>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type BookingOrderActivityEdge = {
  __typename?: 'BookingOrderActivityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<BookingOrderActivity>;
};

export type BookingOrderActivityParticipant = {
  __typename?: 'BookingOrderActivityParticipant';
  bonus?: Maybe<Scalars['Float']>;
  bonusAsset: MixinAsset;
  bonusAssetId?: Maybe<Scalars['String']>;
  bookingOrderActivity: BookingOrderActivity;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  scores: Scalars['Float'];
  state?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
};

/** The connection type for BookingOrderActivityParticipant. */
export type BookingOrderActivityParticipantConnection = {
  __typename?: 'BookingOrderActivityParticipantConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookingOrderActivityParticipantEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BookingOrderActivityParticipant>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type BookingOrderActivityParticipantEdge = {
  __typename?: 'BookingOrderActivityParticipantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<BookingOrderActivityParticipant>;
};

export type BookingOrderSnapshot = {
  __typename?: 'BookingOrderSnapshot';
  createdAt: Scalars['ISO8601DateTime'];
  funds: Scalars['Float'];
  id: Scalars['ID'];
  market: Market;
  marketId: Scalars['String'];
  oceanOrder: OceanOrder;
  oceanOrderId: Scalars['String'];
  orderWeight: Scalars['Float'];
  price: Scalars['Float'];
  scores: Scalars['Float'];
  timestamp: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
  userId: Scalars['String'];
};

/** The connection type for BookingOrderSnapshot. */
export type BookingOrderSnapshotConnection = {
  __typename?: 'BookingOrderSnapshotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookingOrderSnapshotEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BookingOrderSnapshot>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type BookingOrderSnapshotEdge = {
  __typename?: 'BookingOrderSnapshotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<BookingOrderSnapshot>;
};

/** Autogenerated input type of CancelOceanOrderMutation */
export type CancelOceanOrderMutationInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateGroupMarketMutation */
export type CreateGroupMarketMutationInput = {
  quote: Scalars['String'];
  baseAssetId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateInvitationMutation */
export type CreateInvitationMutationInput = {
  inviteCode: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateOceanOrderMutation */
export type CreateOceanOrderMutationInput = {
  marketId: Scalars['ID'];
  side: Scalars['String'];
  orderType: Scalars['String'];
  price: Scalars['String'];
  funds: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteGroupMarketMutation */
export type DeleteGroupMarketMutationInput = {
  marketId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of FavoriteMarketMutation */
export type FavoriteMarketMutationInput = {
  marketId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of GenerateCancelDeprecatedOceanOrderPayUrlMutation */
export type GenerateCancelDeprecatedOceanOrderPayUrlMutationInput = {
  traceId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


export type Invitation = {
  __typename?: 'Invitation';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  invitee: User;
  inviteeId: Scalars['String'];
  invitor: User;
  invitorId: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Invitation. */
export type InvitationConnection = {
  __typename?: 'InvitationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<InvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Invitation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type InvitationEdge = {
  __typename?: 'InvitationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Invitation>;
};

/** Autogenerated input type of LoginWithTokenMutation */
export type LoginWithTokenMutationInput = {
  token: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Market = {
  __typename?: 'Market';
  baseAsset: MixinAsset;
  baseAssetId: Scalars['String'];
  change24h?: Maybe<Scalars['Float']>;
  createdAt: Scalars['ISO8601DateTime'];
  favorited?: Maybe<Scalars['Boolean']>;
  highPrice24h?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  lowPrice24h?: Maybe<Scalars['Float']>;
  oceanMarketId: Scalars['String'];
  oceanOrdersCount: Scalars['Int'];
  price24hAgo?: Maybe<Scalars['Float']>;
  priceCurrent?: Maybe<Scalars['Float']>;
  quoteAsset: MixinAsset;
  quoteAssetId: Scalars['String'];
  recommended?: Maybe<Scalars['Boolean']>;
  tradesCount: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  vol24h?: Maybe<Scalars['Float']>;
};

/** The connection type for Market. */
export type MarketConnection = {
  __typename?: 'MarketConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MarketEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Market>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MarketEdge = {
  __typename?: 'MarketEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Market>;
};

export type MixinAsset = {
  __typename?: 'MixinAsset';
  assetId: Scalars['String'];
  balance?: Maybe<Scalars['Float']>;
  chainAsset?: Maybe<MixinAsset>;
  chainId?: Maybe<Scalars['String']>;
  changeUsd?: Maybe<Scalars['Float']>;
  createdAt: Scalars['ISO8601DateTime'];
  iconUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  priceBtc?: Maybe<Scalars['Float']>;
  priceUsd?: Maybe<Scalars['Float']>;
  symbol: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for MixinAsset. */
export type MixinAssetConnection = {
  __typename?: 'MixinAssetConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinAssetEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinAsset>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinAssetEdge = {
  __typename?: 'MixinAssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinAsset>;
};

export type MixinConversation = {
  __typename?: 'MixinConversation';
  adminUuids?: Maybe<Array<Scalars['String']>>;
  category: Scalars['String'];
  codeId?: Maybe<Scalars['String']>;
  conversationId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  creator?: Maybe<User>;
  creatorId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  participantUuids: Array<Scalars['String']>;
  participants?: Maybe<Array<User>>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for MixinConversation. */
export type MixinConversationConnection = {
  __typename?: 'MixinConversationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinConversationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinConversation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinConversationEdge = {
  __typename?: 'MixinConversationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinConversation>;
};

export type MixinMessage = {
  __typename?: 'MixinMessage';
  action: Scalars['String'];
  category: Scalars['String'];
  content: Scalars['String'];
  conversationId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['String']>;
};

/** The connection type for MixinMessage. */
export type MixinMessageConnection = {
  __typename?: 'MixinMessageConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinMessage>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinMessageEdge = {
  __typename?: 'MixinMessageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinMessage>;
};

export type MixinNetworkSnapshot = {
  __typename?: 'MixinNetworkSnapshot';
  amount: Scalars['Float'];
  asset: MixinAsset;
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  data?: Maybe<Scalars['String']>;
  decryptedMemo?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  opponent?: Maybe<User>;
  opponentId?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  snapshotId: Scalars['String'];
  snapshotType?: Maybe<Scalars['String']>;
  traceId: Scalars['String'];
  transferredAt: Scalars['ISO8601DateTime'];
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  userId: Scalars['String'];
};

/** The connection type for MixinNetworkSnapshot. */
export type MixinNetworkSnapshotConnection = {
  __typename?: 'MixinNetworkSnapshotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinNetworkSnapshotEdge = {
  __typename?: 'MixinNetworkSnapshotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinNetworkSnapshot>;
};

export type MixinNetworkUser = {
  __typename?: 'MixinNetworkUser';
  createdAt: Scalars['ISO8601DateTime'];
  hasPin: Scalars['Boolean'];
  id: Scalars['ID'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  netProfit?: Maybe<Scalars['Float']>;
  owner?: Maybe<User>;
  state: Scalars['String'];
  type: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for MixinNetworkUser. */
export type MixinNetworkUserConnection = {
  __typename?: 'MixinNetworkUserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinNetworkUserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinNetworkUser>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinNetworkUserEdge = {
  __typename?: 'MixinNetworkUserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinNetworkUser>;
};

export type MixinTransfer = {
  __typename?: 'MixinTransfer';
  amount: Scalars['Float'];
  asset: MixinAsset;
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  memo?: Maybe<Scalars['String']>;
  opponentId?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  recipient?: Maybe<User>;
  snapshotId?: Maybe<Scalars['String']>;
  traceId: Scalars['String'];
  transferType?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  userId: Scalars['String'];
};

/** The connection type for MixinTransfer. */
export type MixinTransferConnection = {
  __typename?: 'MixinTransferConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinTransferEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinTransfer>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinTransferEdge = {
  __typename?: 'MixinTransferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinTransfer>;
};

export type Mutation = {
  __typename?: 'Mutation';
  adminArbitragerWithrawBalance?: Maybe<Scalars['Boolean']>;
  adminLogin?: Maybe<Scalars['Boolean']>;
  adminRankMarket?: Maybe<Scalars['Boolean']>;
  adminRecommendMarket?: Maybe<Scalars['Boolean']>;
  adminUnrecommendMarket?: Maybe<Scalars['Boolean']>;
  cancelOceanOrder?: Maybe<OceanOrder>;
  createGroupMarket?: Maybe<Scalars['Boolean']>;
  createInvitation?: Maybe<Scalars['Boolean']>;
  createOceanOrder?: Maybe<OceanOrder>;
  deleteGroupMarket?: Maybe<Scalars['Boolean']>;
  favoriteMarket?: Maybe<Market>;
  generateCancelDeprecatedOceanOrderPayUrl?: Maybe<Scalars['String']>;
  loginWithToken?: Maybe<User>;
  switchLocale?: Maybe<Scalars['Boolean']>;
  unfavoriteMarket?: Maybe<Market>;
};


export type MutationAdminArbitragerWithrawBalanceArgs = {
  input: AdminArbitragerWithrawBalanceMutationInput;
};


export type MutationAdminLoginArgs = {
  input: AdminLoginMutationInput;
};


export type MutationAdminRankMarketArgs = {
  input: AdminRankMarketMutationInput;
};


export type MutationAdminRecommendMarketArgs = {
  input: AdminRecommendMarketMutationInput;
};


export type MutationAdminUnrecommendMarketArgs = {
  input: AdminUnrecommendMarketMutationInput;
};


export type MutationCancelOceanOrderArgs = {
  input: CancelOceanOrderMutationInput;
};


export type MutationCreateGroupMarketArgs = {
  input: CreateGroupMarketMutationInput;
};


export type MutationCreateInvitationArgs = {
  input: CreateInvitationMutationInput;
};


export type MutationCreateOceanOrderArgs = {
  input: CreateOceanOrderMutationInput;
};


export type MutationDeleteGroupMarketArgs = {
  input: DeleteGroupMarketMutationInput;
};


export type MutationFavoriteMarketArgs = {
  input: FavoriteMarketMutationInput;
};


export type MutationGenerateCancelDeprecatedOceanOrderPayUrlArgs = {
  input: GenerateCancelDeprecatedOceanOrderPayUrlMutationInput;
};


export type MutationLoginWithTokenArgs = {
  input: LoginWithTokenMutationInput;
};


export type MutationSwitchLocaleArgs = {
  input: SwitchLocaleMutationInput;
};


export type MutationUnfavoriteMarketArgs = {
  input: UnfavoriteMarketMutationInput;
};

export type OceanOrder = {
  __typename?: 'OceanOrder';
  amount: Scalars['Float'];
  baseAsset: MixinAsset;
  baseAssetId: Scalars['String'];
  broker: MixinNetworkUser;
  brokerId: Scalars['String'];
  conversationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  filledAmount: Scalars['Float'];
  filledFunds: Scalars['Float'];
  funds: Scalars['Float'];
  id: Scalars['ID'];
  marketId: Scalars['String'];
  orderType: Scalars['String'];
  payUrl: Scalars['String'];
  paymentAmount: Scalars['String'];
  paymentAssetId: Scalars['String'];
  paymentMemo: Scalars['String'];
  price: Scalars['Float'];
  quoteAsset: MixinAsset;
  quoteAssetId: Scalars['String'];
  remainingAmount: Scalars['Float'];
  remainingFunds: Scalars['Float'];
  side: Scalars['String'];
  snapshots?: Maybe<Array<MixinNetworkSnapshot>>;
  state: Scalars['String'];
  traceId: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
};

/** The connection type for OceanOrder. */
export type OceanOrderConnection = {
  __typename?: 'OceanOrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OceanOrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<OceanOrder>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OceanOrderEdge = {
  __typename?: 'OceanOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<OceanOrder>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  adminAppStatistic: AppStatistic;
  adminArbitrageOrder: ArbitrageOrder;
  adminArbitrageOrderConnection: ArbitrageOrderConnection;
  adminBookingOrderActivity: BookingOrderActivity;
  adminBookingOrderActivityConnection: BookingOrderActivityConnection;
  adminBookingOrderActivityParticipantConnection: BookingOrderActivityParticipantConnection;
  adminBookingOrderSnapshotConnection: BookingOrderSnapshotConnection;
  adminInvitationConnection: InvitationConnection;
  adminMarket: Market;
  adminMarketConnection: MarketConnection;
  adminMixinConversation: MixinConversation;
  adminMixinConversationConnection: MixinConversationConnection;
  adminMixinMessageConnection: MixinMessageConnection;
  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;
  adminMixinNetworkUser: MixinNetworkUser;
  adminMixinNetworkUserConnection: MixinNetworkUserConnection;
  adminMixinTransferConnection: MixinTransferConnection;
  adminOceanOrder: OceanOrder;
  adminOceanOrderConnection: OceanOrderConnection;
  adminSwapOrder: SwapOrder;
  adminSwapOrderConnection: SwapOrderConnection;
  adminTradeConnection: TradeConnection;
  adminUser: User;
  adminUserConnection: UserConnection;
  adminUserDeprecatedOceanOrders: Array<OceanOrder>;
  adminUserDeprecatedOceanSnapshots: Array<MixinNetworkSnapshot>;
  adminWalletBalance: Array<UserAsset>;
  currentAdmin: Administrator;
  currentConversation?: Maybe<MixinConversation>;
  deprecatedOceanOrders: Array<OceanOrder>;
  groupOwnerCommissionConnection: MixinTransferConnection;
  invitationCommissionConnection: MixinTransferConnection;
  inviteeConnection: UserConnection;
  market: Market;
  marketConnection: MarketConnection;
  mixinAssetConnection: MixinAssetConnection;
  oceanOrder: OceanOrder;
  oceanOrderConnection: OceanOrderConnection;
  oceanSnapshotConnection: MixinNetworkSnapshotConnection;
  userAssets: Array<UserAsset>;
  userSnapshots: Array<MixinNetworkSnapshot>;
};


export type QueryAdminAppStatisticArgs = {
  scope?: Maybe<Scalars['String']>;
};


export type QueryAdminArbitrageOrderArgs = {
  id: Scalars['ID'];
};


export type QueryAdminArbitrageOrderConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
  arbitragerId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminBookingOrderActivityArgs = {
  id: Scalars['ID'];
};


export type QueryAdminBookingOrderActivityConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminBookingOrderActivityParticipantConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  bookingOrderActivityId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  marketId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminBookingOrderSnapshotConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['ID']>;
  marketId?: Maybe<Scalars['ID']>;
  oceanOrderId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminInvitationConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  invitorId?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMarketArgs = {
  id: Scalars['ID'];
};


export type QueryAdminMarketConnectionArgs = {
  query?: Maybe<Scalars['String']>;
  quoteAssetId?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinConversationArgs = {
  id: Scalars['ID'];
};


export type QueryAdminMixinConversationConnectionArgs = {
  category?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinMessageConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinNetworkSnapshotConnectionArgs = {
  oceanOrderId?: Maybe<Scalars['ID']>;
  swapOrderId?: Maybe<Scalars['ID']>;
  snapshotType?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinNetworkUserArgs = {
  mixinUuid: Scalars['String'];
};


export type QueryAdminMixinNetworkUserConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinTransferConnectionArgs = {
  oceanOrderId?: Maybe<Scalars['ID']>;
  swapOrderId?: Maybe<Scalars['ID']>;
  transferType?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['ID']>;
  opponentId?: Maybe<Scalars['ID']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminOceanOrderArgs = {
  id: Scalars['ID'];
};


export type QueryAdminOceanOrderConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  conversationId?: Maybe<Scalars['ID']>;
  marketId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  brokerId?: Maybe<Scalars['ID']>;
  arbitrageOrderId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminSwapOrderArgs = {
  id: Scalars['ID'];
};


export type QueryAdminSwapOrderConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['ID']>;
  brokerId?: Maybe<Scalars['ID']>;
  arbitrageOrderId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminTradeConnectionArgs = {
  marketId?: Maybe<Scalars['ID']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminUserArgs = {
  id: Scalars['ID'];
};


export type QueryAdminUserConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminUserDeprecatedOceanOrdersArgs = {
  userId: Scalars['ID'];
};


export type QueryAdminUserDeprecatedOceanSnapshotsArgs = {
  userId: Scalars['ID'];
};


export type QueryAdminWalletBalanceArgs = {
  userId?: Maybe<Scalars['String']>;
};


export type QueryGroupOwnerCommissionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryInvitationCommissionConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryInviteeConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMarketArgs = {
  id?: Maybe<Scalars['ID']>;
  quoteAssetId?: Maybe<Scalars['String']>;
  baseAssetId?: Maybe<Scalars['String']>;
};


export type QueryMarketConnectionArgs = {
  type: Scalars['String'];
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMixinAssetConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryOceanOrderArgs = {
  id: Scalars['ID'];
};


export type QueryOceanOrderConnectionArgs = {
  marketId?: Maybe<Scalars['ID']>;
  filter?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryOceanSnapshotConnectionArgs = {
  oceanOrderId: Scalars['ID'];
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUserSnapshotsArgs = {
  offset?: Maybe<Scalars['String']>;
  asset?: Maybe<Scalars['String']>;
  opponent?: Maybe<Scalars['String']>;
};

export type SwapOrder = {
  __typename?: 'SwapOrder';
  arbitrageOrderId?: Maybe<Scalars['String']>;
  broker: MixinNetworkUser;
  brokerId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  fillAmount?: Maybe<Scalars['Float']>;
  fillAsset: MixinAsset;
  fillAssetId: Scalars['String'];
  id: Scalars['ID'];
  minAmount?: Maybe<Scalars['Float']>;
  payAmount: Scalars['Float'];
  payAsset: MixinAsset;
  payAssetId: Scalars['String'];
  payUrl?: Maybe<Scalars['String']>;
  state: Scalars['String'];
  traceId: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
};

/** The connection type for SwapOrder. */
export type SwapOrderConnection = {
  __typename?: 'SwapOrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SwapOrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<SwapOrder>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SwapOrderEdge = {
  __typename?: 'SwapOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SwapOrder>;
};

/** Autogenerated input type of SwitchLocaleMutation */
export type SwitchLocaleMutationInput = {
  locale: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Trade = {
  __typename?: 'Trade';
  amount: Scalars['Float'];
  baseAsset: MixinAsset;
  baseAssetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  market: Market;
  marketId: Scalars['String'];
  price?: Maybe<Scalars['Float']>;
  quoteAsset: MixinAsset;
  quoteAssetId: Scalars['String'];
  side: Scalars['String'];
  tradeId: Scalars['ID'];
  tradedAt: Scalars['ISO8601DateTime'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Trade. */
export type TradeConnection = {
  __typename?: 'TradeConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TradeEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Trade>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TradeEdge = {
  __typename?: 'TradeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Trade>;
};

/** Autogenerated input type of UnfavoriteMarketMutation */
export type UnfavoriteMarketMutationInput = {
  marketId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  avatar: Scalars['String'];
  broker?: Maybe<MixinNetworkUser>;
  createdAt: Scalars['ISO8601DateTime'];
  fennec?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  invitationsCount: Scalars['Int'];
  inviteCode: Scalars['String'];
  invitor?: Maybe<User>;
  mayInvited: Scalars['Boolean'];
  mixinId: Scalars['String'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type UserAsset = {
  __typename?: 'UserAsset';
  assetId: Scalars['String'];
  balance: Scalars['Float'];
  balanceUsd: Scalars['Float'];
  chainAsset?: Maybe<MixinAsset>;
  chainId?: Maybe<Scalars['String']>;
  changeBtc?: Maybe<Scalars['Float']>;
  changeUsd?: Maybe<Scalars['Float']>;
  createdAt: Scalars['ISO8601DateTime'];
  iconUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  priceBtc?: Maybe<Scalars['Float']>;
  priceUsd?: Maybe<Scalars['Float']>;
  symbol: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type AdminArbitragerWithrawBalanceMutationVariables = Exact<{
  input: AdminArbitragerWithrawBalanceMutationInput;
}>;


export type AdminArbitragerWithrawBalanceMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminArbitragerWithrawBalance'>
);

export type AdminLoginMutationVariables = Exact<{
  input: AdminLoginMutationInput;
}>;


export type AdminLoginMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminLogin'>
);

export type AdminRankMarketMutationVariables = Exact<{
  input: AdminRankMarketMutationInput;
}>;


export type AdminRankMarketMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminRankMarket'>
);

export type AdminRecommendMarketMutationVariables = Exact<{
  input: AdminRecommendMarketMutationInput;
}>;


export type AdminRecommendMarketMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminRecommendMarket'>
);

export type AdminUnrecommendMarketMutationVariables = Exact<{
  input: AdminUnrecommendMarketMutationInput;
}>;


export type AdminUnrecommendMarketMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminUnrecommendMarket'>
);

export type AdminAppStatisticQueryVariables = Exact<{
  scope?: Maybe<Scalars['String']>;
}>;


export type AdminAppStatisticQuery = (
  { __typename?: 'Query' }
  & { adminAppStatistic: (
    { __typename?: 'AppStatistic' }
    & Pick<AppStatistic, 'usersCount' | 'validOrdersCount' | 'marketsCount' | 'matchTotalUsd' | 'feeTotalUsd' | 'invitationCommissionTotalUsd' | 'groupOwnerCommissionTotalUsd' | 'unprocessedSnapshotsCount' | 'unprocessedTransfersCount'>
  ) }
);

export type AdminArbitrageOrderConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
  arbitragerId?: Maybe<Scalars['ID']>;
}>;


export type AdminArbitrageOrderConnectionQuery = (
  { __typename?: 'Query' }
  & { adminArbitrageOrderConnection: (
    { __typename?: 'ArbitrageOrderConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'ArbitrageOrder' }
      & Pick<ArbitrageOrder, 'id' | 'state' | 'baseAssetProfit' | 'quoteAssetProfit' | 'raw' | 'createdAt'>
      & { arbitrager?: Maybe<(
        { __typename?: 'MixinNetworkUser' }
        & Pick<MixinNetworkUser, 'name' | 'mixinUuid'>
      )>, market: (
        { __typename?: 'Market' }
        & { baseAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ), quoteAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ) }
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminArbitrageOrderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminArbitrageOrderQuery = (
  { __typename?: 'Query' }
  & { adminArbitrageOrder: (
    { __typename?: 'ArbitrageOrder' }
    & Pick<ArbitrageOrder, 'id' | 'state' | 'netProfitUsd' | 'baseAssetProfit' | 'quoteAssetProfit' | 'raw' | 'createdAt'>
    & { arbitrager?: Maybe<(
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'name' | 'mixinUuid'>
    )>, market: (
      { __typename?: 'Market' }
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ) }
    ) }
  ) }
);

export type AdminBookingOrderActivityConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
}>;


export type AdminBookingOrderActivityConnectionQuery = (
  { __typename?: 'Query' }
  & { adminBookingOrderActivityConnection: (
    { __typename?: 'BookingOrderActivityConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'BookingOrderActivity' }
      & Pick<BookingOrderActivity, 'id' | 'startedAt' | 'endedAt' | 'bonusTotal' | 'scoresTotal' | 'validOrdersCount' | 'createdAt'>
      & { market: (
        { __typename?: 'Market' }
        & { baseAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ), quoteAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ) }
      ), bonusAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminBookingOrderActivityParticipantConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['ID']>;
  bookingOrderActivityId?: Maybe<Scalars['ID']>;
  state?: Maybe<Scalars['String']>;
}>;


export type AdminBookingOrderActivityParticipantConnectionQuery = (
  { __typename?: 'Query' }
  & { adminBookingOrderActivityParticipantConnection: (
    { __typename?: 'BookingOrderActivityParticipantConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'BookingOrderActivityParticipant' }
      & Pick<BookingOrderActivityParticipant, 'id' | 'state' | 'bonus' | 'scores' | 'createdAt'>
      & { bookingOrderActivity: (
        { __typename?: 'BookingOrderActivity' }
        & Pick<BookingOrderActivity, 'bonusTotal' | 'scoresTotal'>
        & { market: (
          { __typename?: 'Market' }
          & { baseAsset: (
            { __typename?: 'MixinAsset' }
            & Pick<MixinAsset, 'assetId' | 'symbol'>
          ), quoteAsset: (
            { __typename?: 'MixinAsset' }
            & Pick<MixinAsset, 'assetId' | 'symbol'>
          ) }
        ) }
      ), bonusAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ), user: (
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'mixinId' | 'mixinUuid'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminBookingOrderActivityQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminBookingOrderActivityQuery = (
  { __typename?: 'Query' }
  & { adminBookingOrderActivity: (
    { __typename?: 'BookingOrderActivity' }
    & Pick<BookingOrderActivity, 'id' | 'startedAt' | 'endedAt' | 'bonusTotal' | 'scoresTotal' | 'validOrdersCount' | 'createdAt'>
    & { market: (
      { __typename?: 'Market' }
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol'>
      ) }
    ), bonusAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol'>
    ) }
  ) }
);

export type AdminBookingOrderSnapshotConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  oceanOrderId?: Maybe<Scalars['ID']>;
}>;


export type AdminBookingOrderSnapshotConnectionQuery = (
  { __typename?: 'Query' }
  & { adminBookingOrderSnapshotConnection: (
    { __typename?: 'BookingOrderSnapshotConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'BookingOrderSnapshot' }
      & Pick<BookingOrderSnapshot, 'id' | 'funds' | 'orderWeight' | 'price' | 'scores' | 'timestamp' | 'createdAt'>
      & { user: (
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId'>
      ), market: (
        { __typename?: 'Market' }
        & { baseAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ), quoteAsset: (
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'assetId' | 'symbol'>
        ) }
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminInvitationConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  invitorId?: Maybe<Scalars['String']>;
}>;


export type AdminInvitationConnectionQuery = (
  { __typename?: 'Query' }
  & { adminInvitationConnection: (
    { __typename?: 'InvitationConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Invitation' }
      & Pick<Invitation, 'id' | 'createdAt'>
      & { invitor: (
        { __typename?: 'User' }
        & Pick<User, 'id' | 'name' | 'avatar' | 'mixinId' | 'mixinUuid'>
      ), invitee: (
        { __typename?: 'User' }
        & Pick<User, 'id' | 'name' | 'avatar' | 'mixinId' | 'mixinUuid'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMarketConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  quoteAssetId?: Maybe<Scalars['String']>;
}>;


export type AdminMarketConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMarketConnection: (
    { __typename?: 'MarketConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Market' }
      & Pick<Market, 'id' | 'oceanMarketId' | 'oceanOrdersCount' | 'tradesCount' | 'recommended' | 'createdAt'>
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMarketQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminMarketQuery = (
  { __typename?: 'Query' }
  & { adminMarket: (
    { __typename?: 'Market' }
    & Pick<Market, 'id' | 'oceanMarketId' | 'oceanOrdersCount' | 'tradesCount' | 'createdAt'>
    & { baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  ) }
);

export type AdminMixinConversationConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminMixinConversationConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinConversationConnection: (
    { __typename?: 'MixinConversationConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinConversation' }
      & Pick<MixinConversation, 'id' | 'category' | 'name' | 'codeId' | 'conversationId' | 'participantUuids' | 'createdAt'>
      & { creator?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'name' | 'mixinId' | 'avatar'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMixinConversationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminMixinConversationQuery = (
  { __typename?: 'Query' }
  & { adminMixinConversation: (
    { __typename?: 'MixinConversation' }
    & Pick<MixinConversation, 'id' | 'conversationId' | 'category' | 'name' | 'codeId' | 'creatorId' | 'participantUuids' | 'createdAt'>
    & { creator?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'mixinId' | 'avatar'>
    )>, participants?: Maybe<Array<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'mixinId' | 'avatar'>
    )>> }
  ) }
);

export type AdminMixinMessageConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminMixinMessageConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinMessageConnection: (
    { __typename?: 'MixinMessageConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinMessage' }
      & Pick<MixinMessage, 'id' | 'action' | 'category' | 'conversationId' | 'content' | 'userId' | 'processedAt' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId' | 'mixinUuid'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMixinNetworkSnapshotConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  oceanOrderId?: Maybe<Scalars['ID']>;
  swapOrderId?: Maybe<Scalars['ID']>;
  snapshotType?: Maybe<Scalars['String']>;
}>;


export type AdminMixinNetworkSnapshotConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinNetworkSnapshotConnection: (
    { __typename?: 'MixinNetworkSnapshotConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinNetworkSnapshot' }
      & Pick<MixinNetworkSnapshot, 'id' | 'type' | 'snapshotType' | 'traceId' | 'snapshotId' | 'amount' | 'data' | 'opponentId' | 'processedAt' | 'transferredAt' | 'createdAt'>
      & { opponent?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId'>
      )>, asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'name' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMixinNetworkUserConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
}>;


export type AdminMixinNetworkUserConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinNetworkUserConnection: (
    { __typename?: 'MixinNetworkUserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'id' | 'name' | 'state' | 'type' | 'hasPin' | 'mixinUuid' | 'createdAt'>
      & { owner?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'name' | 'mixinId'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMixinNetworkUserQueryVariables = Exact<{
  mixinUuid: Scalars['String'];
}>;


export type AdminMixinNetworkUserQuery = (
  { __typename?: 'Query' }
  & { adminMixinNetworkUser: (
    { __typename?: 'MixinNetworkUser' }
    & Pick<MixinNetworkUser, 'id' | 'name' | 'state' | 'type' | 'hasPin' | 'mixinUuid' | 'netProfit' | 'createdAt'>
    & { owner?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'mixinId'>
    )> }
  ) }
);

export type AdminMixinTransferConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  oceanOrderId?: Maybe<Scalars['ID']>;
  swapOrderId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  opponentId?: Maybe<Scalars['ID']>;
  transferType?: Maybe<Scalars['String']>;
}>;


export type AdminMixinTransferConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinTransferConnection: (
    { __typename?: 'MixinTransferConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinTransfer' }
      & Pick<MixinTransfer, 'id' | 'transferType' | 'traceId' | 'snapshotId' | 'amount' | 'memo' | 'opponentId' | 'userId' | 'processedAt' | 'createdAt'>
      & { recipient?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId'>
      )>, asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'name' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminOceanOrderConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  conversationId?: Maybe<Scalars['ID']>;
  marketId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  brokerId?: Maybe<Scalars['ID']>;
  arbitrageOrderId?: Maybe<Scalars['ID']>;
}>;


export type AdminOceanOrderConnectionQuery = (
  { __typename?: 'Query' }
  & { adminOceanOrderConnection: (
    { __typename?: 'OceanOrderConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'OceanOrder' }
      & Pick<OceanOrder, 'id' | 'traceId' | 'state' | 'conversationId' | 'side' | 'orderType' | 'price' | 'amount' | 'funds' | 'remainingAmount' | 'remainingFunds' | 'filledAmount' | 'filledFunds' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId'>
      )>, broker: (
        { __typename?: 'MixinNetworkUser' }
        & Pick<MixinNetworkUser, 'name' | 'mixinUuid'>
      ), baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminOceanOrderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminOceanOrderQuery = (
  { __typename?: 'Query' }
  & { adminOceanOrder: (
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'id' | 'traceId' | 'state' | 'conversationId' | 'side' | 'orderType' | 'price' | 'amount' | 'funds' | 'remainingAmount' | 'remainingFunds' | 'filledAmount' | 'filledFunds' | 'createdAt'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'avatar' | 'name' | 'mixinId'>
    )>, broker: (
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'mixinUuid'>
    ), baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  ) }
);

export type AdminSwapOrderConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['ID']>;
  brokerId?: Maybe<Scalars['ID']>;
  arbitrageOrderId?: Maybe<Scalars['ID']>;
}>;


export type AdminSwapOrderConnectionQuery = (
  { __typename?: 'Query' }
  & { adminSwapOrderConnection: (
    { __typename?: 'SwapOrderConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'SwapOrder' }
      & Pick<SwapOrder, 'id' | 'traceId' | 'state' | 'payAmount' | 'fillAmount' | 'minAmount' | 'brokerId' | 'arbitrageOrderId' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinId'>
      )>, broker: (
        { __typename?: 'MixinNetworkUser' }
        & Pick<MixinNetworkUser, 'mixinUuid' | 'name'>
      ), payAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ), fillAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminSwapOrderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminSwapOrderQuery = (
  { __typename?: 'Query' }
  & { adminSwapOrder: (
    { __typename?: 'SwapOrder' }
    & Pick<SwapOrder, 'id' | 'traceId' | 'state' | 'payAmount' | 'fillAmount' | 'minAmount' | 'arbitrageOrderId' | 'createdAt'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'avatar' | 'name' | 'mixinId'>
    )>, broker: (
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'mixinUuid' | 'name'>
    ), payAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), fillAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  ) }
);

export type AdminTradeConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  marketId?: Maybe<Scalars['ID']>;
}>;


export type AdminTradeConnectionQuery = (
  { __typename?: 'Query' }
  & { adminTradeConnection: (
    { __typename?: 'TradeConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Trade' }
      & Pick<Trade, 'id' | 'marketId' | 'side' | 'amount' | 'price' | 'tradeId' | 'tradedAt'>
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'iconUrl' | 'symbol'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'iconUrl' | 'symbol'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminUserConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
}>;


export type AdminUserConnectionQuery = (
  { __typename?: 'Query' }
  & { adminUserConnection: (
    { __typename?: 'UserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'avatar' | 'mixinId' | 'mixinUuid' | 'invitationsCount' | 'createdAt'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminUserDeprecatedOceanOrdersQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type AdminUserDeprecatedOceanOrdersQuery = (
  { __typename?: 'Query' }
  & { adminUserDeprecatedOceanOrders: Array<(
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'traceId' | 'orderType' | 'side' | 'price' | 'createdAt'>
    & { baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  )> }
);

export type AdminUserDeprecatedOceanSnapshotsQueryVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type AdminUserDeprecatedOceanSnapshotsQuery = (
  { __typename?: 'Query' }
  & { adminUserDeprecatedOceanSnapshots: Array<(
    { __typename?: 'MixinNetworkSnapshot' }
    & Pick<MixinNetworkSnapshot, 'traceId' | 'snapshotId' | 'amount' | 'data' | 'decryptedMemo' | 'opponentId' | 'transferredAt'>
    & { asset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'name' | 'iconUrl'>
    ) }
  )> }
);

export type AdminUserQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminUserQuery = (
  { __typename?: 'Query' }
  & { adminUser: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name' | 'avatar' | 'mixinId' | 'mixinUuid' | 'invitationsCount' | 'createdAt'>
    & { broker?: Maybe<(
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'mixinUuid'>
    )>, invitor?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'avatar' | 'mixinId'>
    )> }
  ) }
);

export type CurrentAdminQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentAdminQuery = (
  { __typename?: 'Query' }
  & { currentAdmin: (
    { __typename?: 'Administrator' }
    & Pick<Administrator, 'name'>
  ) }
);

export type AdminWalletBalanceQueryVariables = Exact<{
  userId?: Maybe<Scalars['String']>;
}>;


export type AdminWalletBalanceQuery = (
  { __typename?: 'Query' }
  & { adminWalletBalance: Array<(
    { __typename?: 'UserAsset' }
    & Pick<UserAsset, 'assetId' | 'name' | 'symbol' | 'iconUrl' | 'balance' | 'priceUsd' | 'priceBtc'>
  )> }
);

export type CancelOceanOrderMutationVariables = Exact<{
  input: CancelOceanOrderMutationInput;
}>;


export type CancelOceanOrderMutation = (
  { __typename?: 'Mutation' }
  & { cancelOceanOrder?: Maybe<(
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'id' | 'state'>
  )> }
);

export type CreateGroupMarketMutationVariables = Exact<{
  input: CreateGroupMarketMutationInput;
}>;


export type CreateGroupMarketMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'createGroupMarket'>
);

export type CreateInvitationMutationVariables = Exact<{
  input: CreateInvitationMutationInput;
}>;


export type CreateInvitationMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'createInvitation'>
);

export type CreateOceanOrderMutationVariables = Exact<{
  input: CreateOceanOrderMutationInput;
}>;


export type CreateOceanOrderMutation = (
  { __typename?: 'Mutation' }
  & { createOceanOrder?: Maybe<(
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'id' | 'payUrl' | 'state' | 'brokerId' | 'paymentAssetId' | 'paymentAmount' | 'paymentMemo'>
  )> }
);

export type DeleteGroupMarketMutationVariables = Exact<{
  input: DeleteGroupMarketMutationInput;
}>;


export type DeleteGroupMarketMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteGroupMarket'>
);

export type FavoriteMarketMutationVariables = Exact<{
  input: FavoriteMarketMutationInput;
}>;


export type FavoriteMarketMutation = (
  { __typename?: 'Mutation' }
  & { favoriteMarket?: Maybe<(
    { __typename?: 'Market' }
    & Pick<Market, 'id' | 'favorited'>
  )> }
);

export type GenerateCancelDeprecatedOceanOrderPayUrlMutationVariables = Exact<{
  input: GenerateCancelDeprecatedOceanOrderPayUrlMutationInput;
}>;


export type GenerateCancelDeprecatedOceanOrderPayUrlMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'generateCancelDeprecatedOceanOrderPayUrl'>
);

export type LoginWithTokenMutationVariables = Exact<{
  input: LoginWithTokenMutationInput;
}>;


export type LoginWithTokenMutation = (
  { __typename?: 'Mutation' }
  & { loginWithToken?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'name' | 'avatar' | 'mixinUuid' | 'inviteCode' | 'mayInvited' | 'fennec'>
    & { invitor?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'mixinId' | 'mixinUuid' | 'name'>
    )> }
  )> }
);

export type SwitchLocaleMutationVariables = Exact<{
  input: SwitchLocaleMutationInput;
}>;


export type SwitchLocaleMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'switchLocale'>
);

export type UnfavoriteMarketMutationVariables = Exact<{
  input: UnfavoriteMarketMutationInput;
}>;


export type UnfavoriteMarketMutation = (
  { __typename?: 'Mutation' }
  & { unfavoriteMarket?: Maybe<(
    { __typename?: 'Market' }
    & Pick<Market, 'id' | 'favorited'>
  )> }
);

export type CurrentConversationQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentConversationQuery = (
  { __typename?: 'Query' }
  & { currentConversation?: Maybe<(
    { __typename?: 'MixinConversation' }
    & Pick<MixinConversation, 'id' | 'conversationId' | 'category' | 'name' | 'adminUuids' | 'creatorId'>
  )> }
);

export type DeprecatedOceanOrdersQueryVariables = Exact<{ [key: string]: never; }>;


export type DeprecatedOceanOrdersQuery = (
  { __typename?: 'Query' }
  & { deprecatedOceanOrders: Array<(
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'traceId' | 'orderType' | 'side' | 'price' | 'createdAt'>
    & { baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  )> }
);

export type GroupOwnerCommissionConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type GroupOwnerCommissionConnectionQuery = (
  { __typename?: 'Query' }
  & { groupOwnerCommissionConnection: (
    { __typename?: 'MixinTransferConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinTransfer' }
      & Pick<MixinTransfer, 'id' | 'amount' | 'transferType' | 'traceId' | 'snapshotId'>
      & { asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'name' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type InvitationCommissionConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type InvitationCommissionConnectionQuery = (
  { __typename?: 'Query' }
  & { invitationCommissionConnection: (
    { __typename?: 'MixinTransferConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinTransfer' }
      & Pick<MixinTransfer, 'id' | 'amount' | 'transferType' | 'traceId' | 'snapshotId'>
      & { asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'name' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type InviteeConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type InviteeConnectionQuery = (
  { __typename?: 'Query' }
  & { inviteeConnection: (
    { __typename?: 'UserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'avatar' | 'mixinId' | 'mixinUuid'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type MarketConnectionQueryVariables = Exact<{
  type: Scalars['String'];
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
}>;


export type MarketConnectionQuery = (
  { __typename?: 'Query' }
  & { marketConnection: (
    { __typename?: 'MarketConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'Market' }
      & Pick<Market, 'id' | 'priceCurrent' | 'change24h' | 'vol24h' | 'oceanMarketId'>
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl' | 'changeUsd' | 'priceUsd'>
        & { chainAsset?: Maybe<(
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'iconUrl'>
        )> }
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl' | 'priceUsd'>
        & { chainAsset?: Maybe<(
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'iconUrl'>
        )> }
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type MarketQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  quoteAssetId?: Maybe<Scalars['String']>;
  baseAssetId?: Maybe<Scalars['String']>;
}>;


export type MarketQuery = (
  { __typename?: 'Query' }
  & { market: (
    { __typename?: 'Market' }
    & Pick<Market, 'id' | 'favorited' | 'priceCurrent' | 'change24h' | 'vol24h' | 'highPrice24h' | 'lowPrice24h' | 'oceanMarketId'>
    & { baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl' | 'priceUsd' | 'changeUsd' | 'balance'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl' | 'priceUsd' | 'balance'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    ) }
  ) }
);

export type MixinAssetConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
}>;


export type MixinAssetConnectionQuery = (
  { __typename?: 'Query' }
  & { mixinAssetConnection: (
    { __typename?: 'MixinAssetConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type OceanOrderConnectionQueryVariables = Exact<{
  marketId?: Maybe<Scalars['ID']>;
  after?: Maybe<Scalars['String']>;
  filter?: Maybe<Scalars['String']>;
}>;


export type OceanOrderConnectionQuery = (
  { __typename?: 'Query' }
  & { oceanOrderConnection: (
    { __typename?: 'OceanOrderConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'OceanOrder' }
      & Pick<OceanOrder, 'id' | 'traceId' | 'orderType' | 'side' | 'amount' | 'funds' | 'filledAmount' | 'filledFunds' | 'remainingAmount' | 'remainingFunds' | 'price' | 'state' | 'marketId' | 'createdAt'>
      & { baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
        & { chainAsset?: Maybe<(
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'iconUrl'>
        )> }
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
        & { chainAsset?: Maybe<(
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'iconUrl'>
        )> }
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type OceanOrderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type OceanOrderQuery = (
  { __typename?: 'Query' }
  & { oceanOrder: (
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'id' | 'traceId' | 'orderType' | 'side' | 'amount' | 'funds' | 'filledAmount' | 'filledFunds' | 'remainingAmount' | 'remainingFunds' | 'price' | 'state' | 'marketId' | 'createdAt'>
    & { baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    ) }
  ) }
);

export type OceanSnapshotConnectionQueryVariables = Exact<{
  oceanOrderId: Scalars['ID'];
}>;


export type OceanSnapshotConnectionQuery = (
  { __typename?: 'Query' }
  & { oceanSnapshotConnection: (
    { __typename?: 'MixinNetworkSnapshotConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinNetworkSnapshot' }
      & Pick<MixinNetworkSnapshot, 'id' | 'traceId' | 'snapshotType' | 'snapshotId' | 'amount' | 'transferredAt' | 'createdAt'>
      & { asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
        & { chainAsset?: Maybe<(
          { __typename?: 'MixinAsset' }
          & Pick<MixinAsset, 'iconUrl'>
        )> }
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type UserAssetsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserAssetsQuery = (
  { __typename?: 'Query' }
  & { userAssets: Array<(
    { __typename?: 'UserAsset' }
    & Pick<UserAsset, 'assetId' | 'name' | 'symbol' | 'iconUrl' | 'chainId' | 'balance' | 'balanceUsd' | 'priceUsd' | 'priceBtc' | 'changeUsd' | 'changeBtc'>
    & { chainAsset?: Maybe<(
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'iconUrl'>
    )> }
  )> }
);

export type UserSnapshotsQueryVariables = Exact<{
  offset?: Maybe<Scalars['String']>;
  asset?: Maybe<Scalars['String']>;
  opponent?: Maybe<Scalars['String']>;
}>;


export type UserSnapshotsQuery = (
  { __typename?: 'Query' }
  & { userSnapshots: Array<(
    { __typename?: 'MixinNetworkSnapshot' }
    & Pick<MixinNetworkSnapshot, 'amount' | 'traceId' | 'opponentId' | 'data' | 'createdAt'>
    & { asset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'name' | 'symbol' | 'iconUrl'>
      & { chainAsset?: Maybe<(
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'iconUrl'>
      )> }
    ) }
  )> }
);


export const AdminArbitragerWithrawBalanceDocument = gql`
    mutation AdminArbitragerWithrawBalance($input: AdminArbitragerWithrawBalanceMutationInput!) {
  adminArbitragerWithrawBalance(input: $input)
}
    `;
export type AdminArbitragerWithrawBalanceMutationFn = Apollo.MutationFunction<AdminArbitragerWithrawBalanceMutation, AdminArbitragerWithrawBalanceMutationVariables>;

/**
 * __useAdminArbitragerWithrawBalanceMutation__
 *
 * To run a mutation, you first call `useAdminArbitragerWithrawBalanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminArbitragerWithrawBalanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminArbitragerWithrawBalanceMutation, { data, loading, error }] = useAdminArbitragerWithrawBalanceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminArbitragerWithrawBalanceMutation(baseOptions?: Apollo.MutationHookOptions<AdminArbitragerWithrawBalanceMutation, AdminArbitragerWithrawBalanceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminArbitragerWithrawBalanceMutation, AdminArbitragerWithrawBalanceMutationVariables>(AdminArbitragerWithrawBalanceDocument, options);
      }
export type AdminArbitragerWithrawBalanceMutationHookResult = ReturnType<typeof useAdminArbitragerWithrawBalanceMutation>;
export type AdminArbitragerWithrawBalanceMutationResult = Apollo.MutationResult<AdminArbitragerWithrawBalanceMutation>;
export type AdminArbitragerWithrawBalanceMutationOptions = Apollo.BaseMutationOptions<AdminArbitragerWithrawBalanceMutation, AdminArbitragerWithrawBalanceMutationVariables>;
export const AdminLoginDocument = gql`
    mutation AdminLogin($input: AdminLoginMutationInput!) {
  adminLogin(input: $input)
}
    `;
export type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;

/**
 * __useAdminLoginMutation__
 *
 * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, options);
      }
export type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;
export type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;
export type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;
export const AdminRankMarketDocument = gql`
    mutation AdminRankMarket($input: AdminRankMarketMutationInput!) {
  adminRankMarket(input: $input)
}
    `;
export type AdminRankMarketMutationFn = Apollo.MutationFunction<AdminRankMarketMutation, AdminRankMarketMutationVariables>;

/**
 * __useAdminRankMarketMutation__
 *
 * To run a mutation, you first call `useAdminRankMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminRankMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminRankMarketMutation, { data, loading, error }] = useAdminRankMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminRankMarketMutation(baseOptions?: Apollo.MutationHookOptions<AdminRankMarketMutation, AdminRankMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminRankMarketMutation, AdminRankMarketMutationVariables>(AdminRankMarketDocument, options);
      }
export type AdminRankMarketMutationHookResult = ReturnType<typeof useAdminRankMarketMutation>;
export type AdminRankMarketMutationResult = Apollo.MutationResult<AdminRankMarketMutation>;
export type AdminRankMarketMutationOptions = Apollo.BaseMutationOptions<AdminRankMarketMutation, AdminRankMarketMutationVariables>;
export const AdminRecommendMarketDocument = gql`
    mutation AdminRecommendMarket($input: AdminRecommendMarketMutationInput!) {
  adminRecommendMarket(input: $input)
}
    `;
export type AdminRecommendMarketMutationFn = Apollo.MutationFunction<AdminRecommendMarketMutation, AdminRecommendMarketMutationVariables>;

/**
 * __useAdminRecommendMarketMutation__
 *
 * To run a mutation, you first call `useAdminRecommendMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminRecommendMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminRecommendMarketMutation, { data, loading, error }] = useAdminRecommendMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminRecommendMarketMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecommendMarketMutation, AdminRecommendMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminRecommendMarketMutation, AdminRecommendMarketMutationVariables>(AdminRecommendMarketDocument, options);
      }
export type AdminRecommendMarketMutationHookResult = ReturnType<typeof useAdminRecommendMarketMutation>;
export type AdminRecommendMarketMutationResult = Apollo.MutationResult<AdminRecommendMarketMutation>;
export type AdminRecommendMarketMutationOptions = Apollo.BaseMutationOptions<AdminRecommendMarketMutation, AdminRecommendMarketMutationVariables>;
export const AdminUnrecommendMarketDocument = gql`
    mutation AdminUnrecommendMarket($input: AdminUnrecommendMarketMutationInput!) {
  adminUnrecommendMarket(input: $input)
}
    `;
export type AdminUnrecommendMarketMutationFn = Apollo.MutationFunction<AdminUnrecommendMarketMutation, AdminUnrecommendMarketMutationVariables>;

/**
 * __useAdminUnrecommendMarketMutation__
 *
 * To run a mutation, you first call `useAdminUnrecommendMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUnrecommendMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUnrecommendMarketMutation, { data, loading, error }] = useAdminUnrecommendMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUnrecommendMarketMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnrecommendMarketMutation, AdminUnrecommendMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminUnrecommendMarketMutation, AdminUnrecommendMarketMutationVariables>(AdminUnrecommendMarketDocument, options);
      }
export type AdminUnrecommendMarketMutationHookResult = ReturnType<typeof useAdminUnrecommendMarketMutation>;
export type AdminUnrecommendMarketMutationResult = Apollo.MutationResult<AdminUnrecommendMarketMutation>;
export type AdminUnrecommendMarketMutationOptions = Apollo.BaseMutationOptions<AdminUnrecommendMarketMutation, AdminUnrecommendMarketMutationVariables>;
export const AdminAppStatisticDocument = gql`
    query AdminAppStatistic($scope: String) {
  adminAppStatistic(scope: $scope) {
    usersCount
    validOrdersCount
    marketsCount
    matchTotalUsd
    feeTotalUsd
    invitationCommissionTotalUsd
    groupOwnerCommissionTotalUsd
    unprocessedSnapshotsCount
    unprocessedTransfersCount
  }
}
    `;

/**
 * __useAdminAppStatisticQuery__
 *
 * To run a query within a React component, call `useAdminAppStatisticQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminAppStatisticQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminAppStatisticQuery({
 *   variables: {
 *      scope: // value for 'scope'
 *   },
 * });
 */
export function useAdminAppStatisticQuery(baseOptions?: Apollo.QueryHookOptions<AdminAppStatisticQuery, AdminAppStatisticQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminAppStatisticQuery, AdminAppStatisticQueryVariables>(AdminAppStatisticDocument, options);
      }
export function useAdminAppStatisticLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAppStatisticQuery, AdminAppStatisticQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminAppStatisticQuery, AdminAppStatisticQueryVariables>(AdminAppStatisticDocument, options);
        }
export type AdminAppStatisticQueryHookResult = ReturnType<typeof useAdminAppStatisticQuery>;
export type AdminAppStatisticLazyQueryHookResult = ReturnType<typeof useAdminAppStatisticLazyQuery>;
export type AdminAppStatisticQueryResult = Apollo.QueryResult<AdminAppStatisticQuery, AdminAppStatisticQueryVariables>;
export const AdminArbitrageOrderConnectionDocument = gql`
    query AdminArbitrageOrderConnection($after: String, $state: String, $marketId: ID, $arbitragerId: ID) {
  adminArbitrageOrderConnection(
    after: $after
    state: $state
    marketId: $marketId
    arbitragerId: $arbitragerId
  ) {
    nodes {
      id
      state
      baseAssetProfit
      quoteAssetProfit
      raw
      arbitrager {
        name
        mixinUuid
      }
      market {
        baseAsset {
          assetId
          symbol
        }
        quoteAsset {
          assetId
          symbol
        }
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminArbitrageOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminArbitrageOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArbitrageOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArbitrageOrderConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      state: // value for 'state'
 *      marketId: // value for 'marketId'
 *      arbitragerId: // value for 'arbitragerId'
 *   },
 * });
 */
export function useAdminArbitrageOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArbitrageOrderConnectionQuery, AdminArbitrageOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminArbitrageOrderConnectionQuery, AdminArbitrageOrderConnectionQueryVariables>(AdminArbitrageOrderConnectionDocument, options);
      }
export function useAdminArbitrageOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArbitrageOrderConnectionQuery, AdminArbitrageOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminArbitrageOrderConnectionQuery, AdminArbitrageOrderConnectionQueryVariables>(AdminArbitrageOrderConnectionDocument, options);
        }
export type AdminArbitrageOrderConnectionQueryHookResult = ReturnType<typeof useAdminArbitrageOrderConnectionQuery>;
export type AdminArbitrageOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminArbitrageOrderConnectionLazyQuery>;
export type AdminArbitrageOrderConnectionQueryResult = Apollo.QueryResult<AdminArbitrageOrderConnectionQuery, AdminArbitrageOrderConnectionQueryVariables>;
export const AdminArbitrageOrderDocument = gql`
    query AdminArbitrageOrder($id: ID!) {
  adminArbitrageOrder(id: $id) {
    id
    state
    netProfitUsd
    baseAssetProfit
    quoteAssetProfit
    raw
    arbitrager {
      name
      mixinUuid
    }
    market {
      baseAsset {
        assetId
        symbol
      }
      quoteAsset {
        assetId
        symbol
      }
    }
    createdAt
  }
}
    `;

/**
 * __useAdminArbitrageOrderQuery__
 *
 * To run a query within a React component, call `useAdminArbitrageOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArbitrageOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArbitrageOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminArbitrageOrderQuery(baseOptions: Apollo.QueryHookOptions<AdminArbitrageOrderQuery, AdminArbitrageOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminArbitrageOrderQuery, AdminArbitrageOrderQueryVariables>(AdminArbitrageOrderDocument, options);
      }
export function useAdminArbitrageOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArbitrageOrderQuery, AdminArbitrageOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminArbitrageOrderQuery, AdminArbitrageOrderQueryVariables>(AdminArbitrageOrderDocument, options);
        }
export type AdminArbitrageOrderQueryHookResult = ReturnType<typeof useAdminArbitrageOrderQuery>;
export type AdminArbitrageOrderLazyQueryHookResult = ReturnType<typeof useAdminArbitrageOrderLazyQuery>;
export type AdminArbitrageOrderQueryResult = Apollo.QueryResult<AdminArbitrageOrderQuery, AdminArbitrageOrderQueryVariables>;
export const AdminBookingOrderActivityConnectionDocument = gql`
    query AdminBookingOrderActivityConnection($after: String, $marketId: ID) {
  adminBookingOrderActivityConnection(after: $after, marketId: $marketId) {
    nodes {
      id
      startedAt
      endedAt
      bonusTotal
      scoresTotal
      validOrdersCount
      market {
        baseAsset {
          assetId
          symbol
        }
        quoteAsset {
          assetId
          symbol
        }
      }
      bonusAsset {
        assetId
        symbol
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminBookingOrderActivityConnectionQuery__
 *
 * To run a query within a React component, call `useAdminBookingOrderActivityConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminBookingOrderActivityConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminBookingOrderActivityConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      marketId: // value for 'marketId'
 *   },
 * });
 */
export function useAdminBookingOrderActivityConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBookingOrderActivityConnectionQuery, AdminBookingOrderActivityConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminBookingOrderActivityConnectionQuery, AdminBookingOrderActivityConnectionQueryVariables>(AdminBookingOrderActivityConnectionDocument, options);
      }
export function useAdminBookingOrderActivityConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBookingOrderActivityConnectionQuery, AdminBookingOrderActivityConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminBookingOrderActivityConnectionQuery, AdminBookingOrderActivityConnectionQueryVariables>(AdminBookingOrderActivityConnectionDocument, options);
        }
export type AdminBookingOrderActivityConnectionQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityConnectionQuery>;
export type AdminBookingOrderActivityConnectionLazyQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityConnectionLazyQuery>;
export type AdminBookingOrderActivityConnectionQueryResult = Apollo.QueryResult<AdminBookingOrderActivityConnectionQuery, AdminBookingOrderActivityConnectionQueryVariables>;
export const AdminBookingOrderActivityParticipantConnectionDocument = gql`
    query AdminBookingOrderActivityParticipantConnection($after: String, $userId: ID, $bookingOrderActivityId: ID, $state: String) {
  adminBookingOrderActivityParticipantConnection(
    after: $after
    userId: $userId
    bookingOrderActivityId: $bookingOrderActivityId
    state: $state
  ) {
    nodes {
      id
      state
      bonus
      scores
      bookingOrderActivity {
        bonusTotal
        scoresTotal
        market {
          baseAsset {
            assetId
            symbol
          }
          quoteAsset {
            assetId
            symbol
          }
        }
      }
      bonusAsset {
        assetId
        symbol
      }
      user {
        avatar
        mixinId
        mixinUuid
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminBookingOrderActivityParticipantConnectionQuery__
 *
 * To run a query within a React component, call `useAdminBookingOrderActivityParticipantConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminBookingOrderActivityParticipantConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminBookingOrderActivityParticipantConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      userId: // value for 'userId'
 *      bookingOrderActivityId: // value for 'bookingOrderActivityId'
 *      state: // value for 'state'
 *   },
 * });
 */
export function useAdminBookingOrderActivityParticipantConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBookingOrderActivityParticipantConnectionQuery, AdminBookingOrderActivityParticipantConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminBookingOrderActivityParticipantConnectionQuery, AdminBookingOrderActivityParticipantConnectionQueryVariables>(AdminBookingOrderActivityParticipantConnectionDocument, options);
      }
export function useAdminBookingOrderActivityParticipantConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBookingOrderActivityParticipantConnectionQuery, AdminBookingOrderActivityParticipantConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminBookingOrderActivityParticipantConnectionQuery, AdminBookingOrderActivityParticipantConnectionQueryVariables>(AdminBookingOrderActivityParticipantConnectionDocument, options);
        }
export type AdminBookingOrderActivityParticipantConnectionQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityParticipantConnectionQuery>;
export type AdminBookingOrderActivityParticipantConnectionLazyQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityParticipantConnectionLazyQuery>;
export type AdminBookingOrderActivityParticipantConnectionQueryResult = Apollo.QueryResult<AdminBookingOrderActivityParticipantConnectionQuery, AdminBookingOrderActivityParticipantConnectionQueryVariables>;
export const AdminBookingOrderActivityDocument = gql`
    query AdminBookingOrderActivity($id: ID!) {
  adminBookingOrderActivity(id: $id) {
    id
    startedAt
    endedAt
    bonusTotal
    scoresTotal
    validOrdersCount
    market {
      baseAsset {
        assetId
        symbol
      }
      quoteAsset {
        assetId
        symbol
      }
    }
    bonusAsset {
      assetId
      symbol
    }
    createdAt
  }
}
    `;

/**
 * __useAdminBookingOrderActivityQuery__
 *
 * To run a query within a React component, call `useAdminBookingOrderActivityQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminBookingOrderActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminBookingOrderActivityQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminBookingOrderActivityQuery(baseOptions: Apollo.QueryHookOptions<AdminBookingOrderActivityQuery, AdminBookingOrderActivityQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminBookingOrderActivityQuery, AdminBookingOrderActivityQueryVariables>(AdminBookingOrderActivityDocument, options);
      }
export function useAdminBookingOrderActivityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBookingOrderActivityQuery, AdminBookingOrderActivityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminBookingOrderActivityQuery, AdminBookingOrderActivityQueryVariables>(AdminBookingOrderActivityDocument, options);
        }
export type AdminBookingOrderActivityQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityQuery>;
export type AdminBookingOrderActivityLazyQueryHookResult = ReturnType<typeof useAdminBookingOrderActivityLazyQuery>;
export type AdminBookingOrderActivityQueryResult = Apollo.QueryResult<AdminBookingOrderActivityQuery, AdminBookingOrderActivityQueryVariables>;
export const AdminBookingOrderSnapshotConnectionDocument = gql`
    query AdminBookingOrderSnapshotConnection($after: String, $marketId: ID, $userId: ID, $oceanOrderId: ID) {
  adminBookingOrderSnapshotConnection(
    after: $after
    marketId: $marketId
    userId: $userId
    oceanOrderId: $oceanOrderId
  ) {
    nodes {
      id
      funds
      orderWeight
      price
      scores
      timestamp
      user {
        avatar
        name
        mixinId
      }
      market {
        baseAsset {
          assetId
          symbol
        }
        quoteAsset {
          assetId
          symbol
        }
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminBookingOrderSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useAdminBookingOrderSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminBookingOrderSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminBookingOrderSnapshotConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      marketId: // value for 'marketId'
 *      userId: // value for 'userId'
 *      oceanOrderId: // value for 'oceanOrderId'
 *   },
 * });
 */
export function useAdminBookingOrderSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBookingOrderSnapshotConnectionQuery, AdminBookingOrderSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminBookingOrderSnapshotConnectionQuery, AdminBookingOrderSnapshotConnectionQueryVariables>(AdminBookingOrderSnapshotConnectionDocument, options);
      }
export function useAdminBookingOrderSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBookingOrderSnapshotConnectionQuery, AdminBookingOrderSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminBookingOrderSnapshotConnectionQuery, AdminBookingOrderSnapshotConnectionQueryVariables>(AdminBookingOrderSnapshotConnectionDocument, options);
        }
export type AdminBookingOrderSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminBookingOrderSnapshotConnectionQuery>;
export type AdminBookingOrderSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminBookingOrderSnapshotConnectionLazyQuery>;
export type AdminBookingOrderSnapshotConnectionQueryResult = Apollo.QueryResult<AdminBookingOrderSnapshotConnectionQuery, AdminBookingOrderSnapshotConnectionQueryVariables>;
export const AdminInvitationConnectionDocument = gql`
    query AdminInvitationConnection($after: String, $invitorId: String) {
  adminInvitationConnection(after: $after, invitorId: $invitorId) {
    nodes {
      id
      invitor {
        id
        name
        avatar
        mixinId
        mixinUuid
      }
      invitee {
        id
        name
        avatar
        mixinId
        mixinUuid
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminInvitationConnectionQuery__
 *
 * To run a query within a React component, call `useAdminInvitationConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminInvitationConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminInvitationConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      invitorId: // value for 'invitorId'
 *   },
 * });
 */
export function useAdminInvitationConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminInvitationConnectionQuery, AdminInvitationConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminInvitationConnectionQuery, AdminInvitationConnectionQueryVariables>(AdminInvitationConnectionDocument, options);
      }
export function useAdminInvitationConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminInvitationConnectionQuery, AdminInvitationConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminInvitationConnectionQuery, AdminInvitationConnectionQueryVariables>(AdminInvitationConnectionDocument, options);
        }
export type AdminInvitationConnectionQueryHookResult = ReturnType<typeof useAdminInvitationConnectionQuery>;
export type AdminInvitationConnectionLazyQueryHookResult = ReturnType<typeof useAdminInvitationConnectionLazyQuery>;
export type AdminInvitationConnectionQueryResult = Apollo.QueryResult<AdminInvitationConnectionQuery, AdminInvitationConnectionQueryVariables>;
export const AdminMarketConnectionDocument = gql`
    query AdminMarketConnection($after: String, $query: String, $quoteAssetId: String) {
  adminMarketConnection(after: $after, query: $query, quoteAssetId: $quoteAssetId) {
    nodes {
      id
      oceanMarketId
      oceanOrdersCount
      tradesCount
      recommended
      baseAsset {
        assetId
        symbol
        iconUrl
      }
      quoteAsset {
        assetId
        symbol
        iconUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMarketConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMarketConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMarketConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMarketConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      query: // value for 'query'
 *      quoteAssetId: // value for 'quoteAssetId'
 *   },
 * });
 */
export function useAdminMarketConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMarketConnectionQuery, AdminMarketConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMarketConnectionQuery, AdminMarketConnectionQueryVariables>(AdminMarketConnectionDocument, options);
      }
export function useAdminMarketConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMarketConnectionQuery, AdminMarketConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMarketConnectionQuery, AdminMarketConnectionQueryVariables>(AdminMarketConnectionDocument, options);
        }
export type AdminMarketConnectionQueryHookResult = ReturnType<typeof useAdminMarketConnectionQuery>;
export type AdminMarketConnectionLazyQueryHookResult = ReturnType<typeof useAdminMarketConnectionLazyQuery>;
export type AdminMarketConnectionQueryResult = Apollo.QueryResult<AdminMarketConnectionQuery, AdminMarketConnectionQueryVariables>;
export const AdminMarketDocument = gql`
    query AdminMarket($id: ID!) {
  adminMarket(id: $id) {
    id
    oceanMarketId
    oceanOrdersCount
    tradesCount
    baseAsset {
      assetId
      symbol
      iconUrl
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
    }
    createdAt
  }
}
    `;

/**
 * __useAdminMarketQuery__
 *
 * To run a query within a React component, call `useAdminMarketQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMarketQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMarketQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminMarketQuery(baseOptions: Apollo.QueryHookOptions<AdminMarketQuery, AdminMarketQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMarketQuery, AdminMarketQueryVariables>(AdminMarketDocument, options);
      }
export function useAdminMarketLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMarketQuery, AdminMarketQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMarketQuery, AdminMarketQueryVariables>(AdminMarketDocument, options);
        }
export type AdminMarketQueryHookResult = ReturnType<typeof useAdminMarketQuery>;
export type AdminMarketLazyQueryHookResult = ReturnType<typeof useAdminMarketLazyQuery>;
export type AdminMarketQueryResult = Apollo.QueryResult<AdminMarketQuery, AdminMarketQueryVariables>;
export const AdminMixinConversationConnectionDocument = gql`
    query AdminMixinConversationConnection($after: String) {
  adminMixinConversationConnection(after: $after) {
    nodes {
      id
      category
      name
      codeId
      conversationId
      creator {
        name
        mixinId
        avatar
      }
      participantUuids
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinConversationConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinConversationConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinConversationConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinConversationConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinConversationConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinConversationConnectionQuery, AdminMixinConversationConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinConversationConnectionQuery, AdminMixinConversationConnectionQueryVariables>(AdminMixinConversationConnectionDocument, options);
      }
export function useAdminMixinConversationConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinConversationConnectionQuery, AdminMixinConversationConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinConversationConnectionQuery, AdminMixinConversationConnectionQueryVariables>(AdminMixinConversationConnectionDocument, options);
        }
export type AdminMixinConversationConnectionQueryHookResult = ReturnType<typeof useAdminMixinConversationConnectionQuery>;
export type AdminMixinConversationConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinConversationConnectionLazyQuery>;
export type AdminMixinConversationConnectionQueryResult = Apollo.QueryResult<AdminMixinConversationConnectionQuery, AdminMixinConversationConnectionQueryVariables>;
export const AdminMixinConversationDocument = gql`
    query AdminMixinConversation($id: ID!) {
  adminMixinConversation(id: $id) {
    id
    conversationId
    category
    name
    codeId
    creatorId
    creator {
      name
      mixinId
      avatar
    }
    participantUuids
    participants {
      name
      mixinId
      avatar
    }
    createdAt
  }
}
    `;

/**
 * __useAdminMixinConversationQuery__
 *
 * To run a query within a React component, call `useAdminMixinConversationQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinConversationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinConversationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminMixinConversationQuery(baseOptions: Apollo.QueryHookOptions<AdminMixinConversationQuery, AdminMixinConversationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinConversationQuery, AdminMixinConversationQueryVariables>(AdminMixinConversationDocument, options);
      }
export function useAdminMixinConversationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinConversationQuery, AdminMixinConversationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinConversationQuery, AdminMixinConversationQueryVariables>(AdminMixinConversationDocument, options);
        }
export type AdminMixinConversationQueryHookResult = ReturnType<typeof useAdminMixinConversationQuery>;
export type AdminMixinConversationLazyQueryHookResult = ReturnType<typeof useAdminMixinConversationLazyQuery>;
export type AdminMixinConversationQueryResult = Apollo.QueryResult<AdminMixinConversationQuery, AdminMixinConversationQueryVariables>;
export const AdminMixinMessageConnectionDocument = gql`
    query AdminMixinMessageConnection($after: String) {
  adminMixinMessageConnection(after: $after) {
    nodes {
      id
      action
      category
      conversationId
      content
      userId
      processedAt
      user {
        avatar
        name
        mixinId
        mixinUuid
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinMessageConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinMessageConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
      }
export function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
        }
export type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;
export type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;
export type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;
export const AdminMixinNetworkSnapshotConnectionDocument = gql`
    query AdminMixinNetworkSnapshotConnection($after: String, $oceanOrderId: ID, $swapOrderId: ID, $snapshotType: String) {
  adminMixinNetworkSnapshotConnection(
    after: $after
    oceanOrderId: $oceanOrderId
    swapOrderId: $swapOrderId
    snapshotType: $snapshotType
  ) {
    nodes {
      id
      type
      snapshotType
      traceId
      snapshotId
      amount
      data
      opponentId
      opponent {
        avatar
        name
        mixinId
      }
      asset {
        assetId
        symbol
        name
        iconUrl
      }
      processedAt
      transferredAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinNetworkSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      oceanOrderId: // value for 'oceanOrderId'
 *      swapOrderId: // value for 'swapOrderId'
 *      snapshotType: // value for 'snapshotType'
 *   },
 * });
 */
export function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
      }
export function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
        }
export type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;
export type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;
export type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;
export const AdminMixinNetworkUserConnectionDocument = gql`
    query AdminMixinNetworkUserConnection($after: String, $query: String, $state: String, $type: String) {
  adminMixinNetworkUserConnection(
    after: $after
    query: $query
    state: $state
    type: $type
  ) {
    nodes {
      id
      name
      state
      type
      hasPin
      mixinUuid
      owner {
        name
        mixinId
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinNetworkUserConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinNetworkUserConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinNetworkUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinNetworkUserConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      query: // value for 'query'
 *      state: // value for 'state'
 *      type: // value for 'type'
 *   },
 * });
 */
export function useAdminMixinNetworkUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkUserConnectionQuery, AdminMixinNetworkUserConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinNetworkUserConnectionQuery, AdminMixinNetworkUserConnectionQueryVariables>(AdminMixinNetworkUserConnectionDocument, options);
      }
export function useAdminMixinNetworkUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkUserConnectionQuery, AdminMixinNetworkUserConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinNetworkUserConnectionQuery, AdminMixinNetworkUserConnectionQueryVariables>(AdminMixinNetworkUserConnectionDocument, options);
        }
export type AdminMixinNetworkUserConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkUserConnectionQuery>;
export type AdminMixinNetworkUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkUserConnectionLazyQuery>;
export type AdminMixinNetworkUserConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkUserConnectionQuery, AdminMixinNetworkUserConnectionQueryVariables>;
export const AdminMixinNetworkUserDocument = gql`
    query AdminMixinNetworkUser($mixinUuid: String!) {
  adminMixinNetworkUser(mixinUuid: $mixinUuid) {
    id
    name
    state
    type
    hasPin
    mixinUuid
    netProfit
    owner {
      name
      mixinId
    }
    createdAt
  }
}
    `;

/**
 * __useAdminMixinNetworkUserQuery__
 *
 * To run a query within a React component, call `useAdminMixinNetworkUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinNetworkUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinNetworkUserQuery({
 *   variables: {
 *      mixinUuid: // value for 'mixinUuid'
 *   },
 * });
 */
export function useAdminMixinNetworkUserQuery(baseOptions: Apollo.QueryHookOptions<AdminMixinNetworkUserQuery, AdminMixinNetworkUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinNetworkUserQuery, AdminMixinNetworkUserQueryVariables>(AdminMixinNetworkUserDocument, options);
      }
export function useAdminMixinNetworkUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkUserQuery, AdminMixinNetworkUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinNetworkUserQuery, AdminMixinNetworkUserQueryVariables>(AdminMixinNetworkUserDocument, options);
        }
export type AdminMixinNetworkUserQueryHookResult = ReturnType<typeof useAdminMixinNetworkUserQuery>;
export type AdminMixinNetworkUserLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkUserLazyQuery>;
export type AdminMixinNetworkUserQueryResult = Apollo.QueryResult<AdminMixinNetworkUserQuery, AdminMixinNetworkUserQueryVariables>;
export const AdminMixinTransferConnectionDocument = gql`
    query AdminMixinTransferConnection($after: String, $oceanOrderId: ID, $swapOrderId: ID, $userId: ID, $opponentId: ID, $transferType: String) {
  adminMixinTransferConnection(
    after: $after
    oceanOrderId: $oceanOrderId
    swapOrderId: $swapOrderId
    userId: $userId
    opponentId: $opponentId
    transferType: $transferType
  ) {
    nodes {
      id
      transferType
      traceId
      snapshotId
      amount
      memo
      opponentId
      userId
      recipient {
        avatar
        name
        mixinId
      }
      asset {
        assetId
        symbol
        name
        iconUrl
      }
      processedAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinTransferConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinTransferConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      oceanOrderId: // value for 'oceanOrderId'
 *      swapOrderId: // value for 'swapOrderId'
 *      userId: // value for 'userId'
 *      opponentId: // value for 'opponentId'
 *      transferType: // value for 'transferType'
 *   },
 * });
 */
export function useAdminMixinTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinTransferConnectionQuery, AdminMixinTransferConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinTransferConnectionQuery, AdminMixinTransferConnectionQueryVariables>(AdminMixinTransferConnectionDocument, options);
      }
export function useAdminMixinTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinTransferConnectionQuery, AdminMixinTransferConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinTransferConnectionQuery, AdminMixinTransferConnectionQueryVariables>(AdminMixinTransferConnectionDocument, options);
        }
export type AdminMixinTransferConnectionQueryHookResult = ReturnType<typeof useAdminMixinTransferConnectionQuery>;
export type AdminMixinTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinTransferConnectionLazyQuery>;
export type AdminMixinTransferConnectionQueryResult = Apollo.QueryResult<AdminMixinTransferConnectionQuery, AdminMixinTransferConnectionQueryVariables>;
export const AdminOceanOrderConnectionDocument = gql`
    query AdminOceanOrderConnection($after: String, $state: String, $query: String, $conversationId: ID, $marketId: ID, $userId: ID, $brokerId: ID, $arbitrageOrderId: ID) {
  adminOceanOrderConnection(
    after: $after
    state: $state
    query: $query
    conversationId: $conversationId
    marketId: $marketId
    userId: $userId
    brokerId: $brokerId
    arbitrageOrderId: $arbitrageOrderId
  ) {
    nodes {
      id
      traceId
      state
      conversationId
      side
      orderType
      price
      amount
      funds
      remainingAmount
      remainingFunds
      filledAmount
      filledFunds
      user {
        avatar
        name
        mixinId
      }
      broker {
        name
        mixinUuid
      }
      baseAsset {
        assetId
        symbol
        iconUrl
      }
      quoteAsset {
        assetId
        symbol
        iconUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminOceanOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminOceanOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminOceanOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminOceanOrderConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      state: // value for 'state'
 *      query: // value for 'query'
 *      conversationId: // value for 'conversationId'
 *      marketId: // value for 'marketId'
 *      userId: // value for 'userId'
 *      brokerId: // value for 'brokerId'
 *      arbitrageOrderId: // value for 'arbitrageOrderId'
 *   },
 * });
 */
export function useAdminOceanOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>(AdminOceanOrderConnectionDocument, options);
      }
export function useAdminOceanOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>(AdminOceanOrderConnectionDocument, options);
        }
export type AdminOceanOrderConnectionQueryHookResult = ReturnType<typeof useAdminOceanOrderConnectionQuery>;
export type AdminOceanOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOceanOrderConnectionLazyQuery>;
export type AdminOceanOrderConnectionQueryResult = Apollo.QueryResult<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>;
export const AdminOceanOrderDocument = gql`
    query AdminOceanOrder($id: ID!) {
  adminOceanOrder(id: $id) {
    id
    traceId
    state
    conversationId
    side
    orderType
    price
    amount
    funds
    remainingAmount
    remainingFunds
    filledAmount
    filledFunds
    user {
      avatar
      name
      mixinId
    }
    broker {
      mixinUuid
    }
    baseAsset {
      assetId
      symbol
      iconUrl
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
    }
    createdAt
  }
}
    `;

/**
 * __useAdminOceanOrderQuery__
 *
 * To run a query within a React component, call `useAdminOceanOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminOceanOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminOceanOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminOceanOrderQuery(baseOptions: Apollo.QueryHookOptions<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>(AdminOceanOrderDocument, options);
      }
export function useAdminOceanOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>(AdminOceanOrderDocument, options);
        }
export type AdminOceanOrderQueryHookResult = ReturnType<typeof useAdminOceanOrderQuery>;
export type AdminOceanOrderLazyQueryHookResult = ReturnType<typeof useAdminOceanOrderLazyQuery>;
export type AdminOceanOrderQueryResult = Apollo.QueryResult<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>;
export const AdminSwapOrderConnectionDocument = gql`
    query AdminSwapOrderConnection($after: String, $state: String, $query: String, $userId: ID, $brokerId: ID, $arbitrageOrderId: ID) {
  adminSwapOrderConnection(
    after: $after
    state: $state
    query: $query
    userId: $userId
    brokerId: $brokerId
    arbitrageOrderId: $arbitrageOrderId
  ) {
    nodes {
      id
      traceId
      state
      payAmount
      fillAmount
      minAmount
      payAmount
      brokerId
      user {
        avatar
        name
        mixinId
      }
      broker {
        mixinUuid
        name
      }
      payAsset {
        assetId
        symbol
        iconUrl
      }
      fillAsset {
        assetId
        symbol
        iconUrl
      }
      arbitrageOrderId
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminSwapOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminSwapOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminSwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminSwapOrderConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      state: // value for 'state'
 *      query: // value for 'query'
 *      userId: // value for 'userId'
 *      brokerId: // value for 'brokerId'
 *      arbitrageOrderId: // value for 'arbitrageOrderId'
 *   },
 * });
 */
export function useAdminSwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);
      }
export function useAdminSwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);
        }
export type AdminSwapOrderConnectionQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionQuery>;
export type AdminSwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionLazyQuery>;
export type AdminSwapOrderConnectionQueryResult = Apollo.QueryResult<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>;
export const AdminSwapOrderDocument = gql`
    query AdminSwapOrder($id: ID!) {
  adminSwapOrder(id: $id) {
    id
    traceId
    state
    payAmount
    fillAmount
    minAmount
    payAmount
    user {
      avatar
      name
      mixinId
    }
    broker {
      mixinUuid
      name
    }
    payAsset {
      assetId
      symbol
      iconUrl
    }
    fillAsset {
      assetId
      symbol
      iconUrl
    }
    arbitrageOrderId
    createdAt
  }
}
    `;

/**
 * __useAdminSwapOrderQuery__
 *
 * To run a query within a React component, call `useAdminSwapOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminSwapOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminSwapOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminSwapOrderQuery(baseOptions: Apollo.QueryHookOptions<AdminSwapOrderQuery, AdminSwapOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminSwapOrderQuery, AdminSwapOrderQueryVariables>(AdminSwapOrderDocument, options);
      }
export function useAdminSwapOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderQuery, AdminSwapOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminSwapOrderQuery, AdminSwapOrderQueryVariables>(AdminSwapOrderDocument, options);
        }
export type AdminSwapOrderQueryHookResult = ReturnType<typeof useAdminSwapOrderQuery>;
export type AdminSwapOrderLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderLazyQuery>;
export type AdminSwapOrderQueryResult = Apollo.QueryResult<AdminSwapOrderQuery, AdminSwapOrderQueryVariables>;
export const AdminTradeConnectionDocument = gql`
    query AdminTradeConnection($after: String, $marketId: ID) {
  adminTradeConnection(after: $after, marketId: $marketId) {
    nodes {
      id
      marketId
      side
      amount
      price
      baseAsset {
        assetId
        iconUrl
        symbol
      }
      quoteAsset {
        assetId
        iconUrl
        symbol
      }
      tradeId
      tradedAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminTradeConnectionQuery__
 *
 * To run a query within a React component, call `useAdminTradeConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminTradeConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminTradeConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      marketId: // value for 'marketId'
 *   },
 * });
 */
export function useAdminTradeConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTradeConnectionQuery, AdminTradeConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminTradeConnectionQuery, AdminTradeConnectionQueryVariables>(AdminTradeConnectionDocument, options);
      }
export function useAdminTradeConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTradeConnectionQuery, AdminTradeConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminTradeConnectionQuery, AdminTradeConnectionQueryVariables>(AdminTradeConnectionDocument, options);
        }
export type AdminTradeConnectionQueryHookResult = ReturnType<typeof useAdminTradeConnectionQuery>;
export type AdminTradeConnectionLazyQueryHookResult = ReturnType<typeof useAdminTradeConnectionLazyQuery>;
export type AdminTradeConnectionQueryResult = Apollo.QueryResult<AdminTradeConnectionQuery, AdminTradeConnectionQueryVariables>;
export const AdminUserConnectionDocument = gql`
    query AdminUserConnection($after: String, $query: String) {
  adminUserConnection(after: $after, query: $query) {
    nodes {
      id
      name
      avatar
      mixinId
      mixinUuid
      invitationsCount
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminUserConnectionQuery__
 *
 * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      query: // value for 'query'
 *   },
 * });
 */
export function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
      }
export function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
        }
export type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;
export type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;
export type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;
export const AdminUserDeprecatedOceanOrdersDocument = gql`
    query AdminUserDeprecatedOceanOrders($userId: ID!) {
  adminUserDeprecatedOceanOrders(userId: $userId) {
    traceId
    orderType
    side
    price
    baseAsset {
      assetId
      symbol
      iconUrl
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
    }
    createdAt
  }
}
    `;

/**
 * __useAdminUserDeprecatedOceanOrdersQuery__
 *
 * To run a query within a React component, call `useAdminUserDeprecatedOceanOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserDeprecatedOceanOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserDeprecatedOceanOrdersQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useAdminUserDeprecatedOceanOrdersQuery(baseOptions: Apollo.QueryHookOptions<AdminUserDeprecatedOceanOrdersQuery, AdminUserDeprecatedOceanOrdersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserDeprecatedOceanOrdersQuery, AdminUserDeprecatedOceanOrdersQueryVariables>(AdminUserDeprecatedOceanOrdersDocument, options);
      }
export function useAdminUserDeprecatedOceanOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserDeprecatedOceanOrdersQuery, AdminUserDeprecatedOceanOrdersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserDeprecatedOceanOrdersQuery, AdminUserDeprecatedOceanOrdersQueryVariables>(AdminUserDeprecatedOceanOrdersDocument, options);
        }
export type AdminUserDeprecatedOceanOrdersQueryHookResult = ReturnType<typeof useAdminUserDeprecatedOceanOrdersQuery>;
export type AdminUserDeprecatedOceanOrdersLazyQueryHookResult = ReturnType<typeof useAdminUserDeprecatedOceanOrdersLazyQuery>;
export type AdminUserDeprecatedOceanOrdersQueryResult = Apollo.QueryResult<AdminUserDeprecatedOceanOrdersQuery, AdminUserDeprecatedOceanOrdersQueryVariables>;
export const AdminUserDeprecatedOceanSnapshotsDocument = gql`
    query AdminUserDeprecatedOceanSnapshots($userId: ID!) {
  adminUserDeprecatedOceanSnapshots(userId: $userId) {
    traceId
    snapshotId
    amount
    data
    decryptedMemo
    opponentId
    asset {
      assetId
      symbol
      name
      iconUrl
    }
    transferredAt
  }
}
    `;

/**
 * __useAdminUserDeprecatedOceanSnapshotsQuery__
 *
 * To run a query within a React component, call `useAdminUserDeprecatedOceanSnapshotsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserDeprecatedOceanSnapshotsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserDeprecatedOceanSnapshotsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useAdminUserDeprecatedOceanSnapshotsQuery(baseOptions: Apollo.QueryHookOptions<AdminUserDeprecatedOceanSnapshotsQuery, AdminUserDeprecatedOceanSnapshotsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserDeprecatedOceanSnapshotsQuery, AdminUserDeprecatedOceanSnapshotsQueryVariables>(AdminUserDeprecatedOceanSnapshotsDocument, options);
      }
export function useAdminUserDeprecatedOceanSnapshotsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserDeprecatedOceanSnapshotsQuery, AdminUserDeprecatedOceanSnapshotsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserDeprecatedOceanSnapshotsQuery, AdminUserDeprecatedOceanSnapshotsQueryVariables>(AdminUserDeprecatedOceanSnapshotsDocument, options);
        }
export type AdminUserDeprecatedOceanSnapshotsQueryHookResult = ReturnType<typeof useAdminUserDeprecatedOceanSnapshotsQuery>;
export type AdminUserDeprecatedOceanSnapshotsLazyQueryHookResult = ReturnType<typeof useAdminUserDeprecatedOceanSnapshotsLazyQuery>;
export type AdminUserDeprecatedOceanSnapshotsQueryResult = Apollo.QueryResult<AdminUserDeprecatedOceanSnapshotsQuery, AdminUserDeprecatedOceanSnapshotsQueryVariables>;
export const AdminUserDocument = gql`
    query AdminUser($id: ID!) {
  adminUser(id: $id) {
    id
    name
    avatar
    mixinId
    mixinUuid
    invitationsCount
    broker {
      mixinUuid
    }
    invitor {
      name
      avatar
      mixinId
    }
    createdAt
  }
}
    `;

/**
 * __useAdminUserQuery__
 *
 * To run a query within a React component, call `useAdminUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminUserQuery(baseOptions: Apollo.QueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
      }
export function useAdminUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
        }
export type AdminUserQueryHookResult = ReturnType<typeof useAdminUserQuery>;
export type AdminUserLazyQueryHookResult = ReturnType<typeof useAdminUserLazyQuery>;
export type AdminUserQueryResult = Apollo.QueryResult<AdminUserQuery, AdminUserQueryVariables>;
export const CurrentAdminDocument = gql`
    query CurrentAdmin {
  currentAdmin {
    name
  }
}
    `;

/**
 * __useCurrentAdminQuery__
 *
 * To run a query within a React component, call `useCurrentAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentAdminQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentAdminQuery(baseOptions?: Apollo.QueryHookOptions<CurrentAdminQuery, CurrentAdminQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentAdminQuery, CurrentAdminQueryVariables>(CurrentAdminDocument, options);
      }
export function useCurrentAdminLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentAdminQuery, CurrentAdminQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentAdminQuery, CurrentAdminQueryVariables>(CurrentAdminDocument, options);
        }
export type CurrentAdminQueryHookResult = ReturnType<typeof useCurrentAdminQuery>;
export type CurrentAdminLazyQueryHookResult = ReturnType<typeof useCurrentAdminLazyQuery>;
export type CurrentAdminQueryResult = Apollo.QueryResult<CurrentAdminQuery, CurrentAdminQueryVariables>;
export const AdminWalletBalanceDocument = gql`
    query AdminWalletBalance($userId: String) {
  adminWalletBalance(userId: $userId) {
    assetId
    name
    symbol
    iconUrl
    balance
    priceUsd
    priceBtc
  }
}
    `;

/**
 * __useAdminWalletBalanceQuery__
 *
 * To run a query within a React component, call `useAdminWalletBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminWalletBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminWalletBalanceQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useAdminWalletBalanceQuery(baseOptions?: Apollo.QueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);
      }
export function useAdminWalletBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);
        }
export type AdminWalletBalanceQueryHookResult = ReturnType<typeof useAdminWalletBalanceQuery>;
export type AdminWalletBalanceLazyQueryHookResult = ReturnType<typeof useAdminWalletBalanceLazyQuery>;
export type AdminWalletBalanceQueryResult = Apollo.QueryResult<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>;
export const CancelOceanOrderDocument = gql`
    mutation CancelOceanOrder($input: CancelOceanOrderMutationInput!) {
  cancelOceanOrder(input: $input) {
    id
    state
  }
}
    `;
export type CancelOceanOrderMutationFn = Apollo.MutationFunction<CancelOceanOrderMutation, CancelOceanOrderMutationVariables>;

/**
 * __useCancelOceanOrderMutation__
 *
 * To run a mutation, you first call `useCancelOceanOrderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCancelOceanOrderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [cancelOceanOrderMutation, { data, loading, error }] = useCancelOceanOrderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCancelOceanOrderMutation(baseOptions?: Apollo.MutationHookOptions<CancelOceanOrderMutation, CancelOceanOrderMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CancelOceanOrderMutation, CancelOceanOrderMutationVariables>(CancelOceanOrderDocument, options);
      }
export type CancelOceanOrderMutationHookResult = ReturnType<typeof useCancelOceanOrderMutation>;
export type CancelOceanOrderMutationResult = Apollo.MutationResult<CancelOceanOrderMutation>;
export type CancelOceanOrderMutationOptions = Apollo.BaseMutationOptions<CancelOceanOrderMutation, CancelOceanOrderMutationVariables>;
export const CreateGroupMarketDocument = gql`
    mutation CreateGroupMarket($input: CreateGroupMarketMutationInput!) {
  createGroupMarket(input: $input)
}
    `;
export type CreateGroupMarketMutationFn = Apollo.MutationFunction<CreateGroupMarketMutation, CreateGroupMarketMutationVariables>;

/**
 * __useCreateGroupMarketMutation__
 *
 * To run a mutation, you first call `useCreateGroupMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGroupMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGroupMarketMutation, { data, loading, error }] = useCreateGroupMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateGroupMarketMutation(baseOptions?: Apollo.MutationHookOptions<CreateGroupMarketMutation, CreateGroupMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateGroupMarketMutation, CreateGroupMarketMutationVariables>(CreateGroupMarketDocument, options);
      }
export type CreateGroupMarketMutationHookResult = ReturnType<typeof useCreateGroupMarketMutation>;
export type CreateGroupMarketMutationResult = Apollo.MutationResult<CreateGroupMarketMutation>;
export type CreateGroupMarketMutationOptions = Apollo.BaseMutationOptions<CreateGroupMarketMutation, CreateGroupMarketMutationVariables>;
export const CreateInvitationDocument = gql`
    mutation CreateInvitation($input: CreateInvitationMutationInput!) {
  createInvitation(input: $input)
}
    `;
export type CreateInvitationMutationFn = Apollo.MutationFunction<CreateInvitationMutation, CreateInvitationMutationVariables>;

/**
 * __useCreateInvitationMutation__
 *
 * To run a mutation, you first call `useCreateInvitationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInvitationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInvitationMutation, { data, loading, error }] = useCreateInvitationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateInvitationMutation(baseOptions?: Apollo.MutationHookOptions<CreateInvitationMutation, CreateInvitationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateInvitationMutation, CreateInvitationMutationVariables>(CreateInvitationDocument, options);
      }
export type CreateInvitationMutationHookResult = ReturnType<typeof useCreateInvitationMutation>;
export type CreateInvitationMutationResult = Apollo.MutationResult<CreateInvitationMutation>;
export type CreateInvitationMutationOptions = Apollo.BaseMutationOptions<CreateInvitationMutation, CreateInvitationMutationVariables>;
export const CreateOceanOrderDocument = gql`
    mutation CreateOceanOrder($input: CreateOceanOrderMutationInput!) {
  createOceanOrder(input: $input) {
    id
    payUrl
    state
    brokerId
    paymentAssetId
    paymentAmount
    paymentMemo
  }
}
    `;
export type CreateOceanOrderMutationFn = Apollo.MutationFunction<CreateOceanOrderMutation, CreateOceanOrderMutationVariables>;

/**
 * __useCreateOceanOrderMutation__
 *
 * To run a mutation, you first call `useCreateOceanOrderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOceanOrderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOceanOrderMutation, { data, loading, error }] = useCreateOceanOrderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOceanOrderMutation(baseOptions?: Apollo.MutationHookOptions<CreateOceanOrderMutation, CreateOceanOrderMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOceanOrderMutation, CreateOceanOrderMutationVariables>(CreateOceanOrderDocument, options);
      }
export type CreateOceanOrderMutationHookResult = ReturnType<typeof useCreateOceanOrderMutation>;
export type CreateOceanOrderMutationResult = Apollo.MutationResult<CreateOceanOrderMutation>;
export type CreateOceanOrderMutationOptions = Apollo.BaseMutationOptions<CreateOceanOrderMutation, CreateOceanOrderMutationVariables>;
export const DeleteGroupMarketDocument = gql`
    mutation DeleteGroupMarket($input: DeleteGroupMarketMutationInput!) {
  deleteGroupMarket(input: $input)
}
    `;
export type DeleteGroupMarketMutationFn = Apollo.MutationFunction<DeleteGroupMarketMutation, DeleteGroupMarketMutationVariables>;

/**
 * __useDeleteGroupMarketMutation__
 *
 * To run a mutation, you first call `useDeleteGroupMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteGroupMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteGroupMarketMutation, { data, loading, error }] = useDeleteGroupMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteGroupMarketMutation(baseOptions?: Apollo.MutationHookOptions<DeleteGroupMarketMutation, DeleteGroupMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteGroupMarketMutation, DeleteGroupMarketMutationVariables>(DeleteGroupMarketDocument, options);
      }
export type DeleteGroupMarketMutationHookResult = ReturnType<typeof useDeleteGroupMarketMutation>;
export type DeleteGroupMarketMutationResult = Apollo.MutationResult<DeleteGroupMarketMutation>;
export type DeleteGroupMarketMutationOptions = Apollo.BaseMutationOptions<DeleteGroupMarketMutation, DeleteGroupMarketMutationVariables>;
export const FavoriteMarketDocument = gql`
    mutation FavoriteMarket($input: FavoriteMarketMutationInput!) {
  favoriteMarket(input: $input) {
    id
    favorited
  }
}
    `;
export type FavoriteMarketMutationFn = Apollo.MutationFunction<FavoriteMarketMutation, FavoriteMarketMutationVariables>;

/**
 * __useFavoriteMarketMutation__
 *
 * To run a mutation, you first call `useFavoriteMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFavoriteMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [favoriteMarketMutation, { data, loading, error }] = useFavoriteMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFavoriteMarketMutation(baseOptions?: Apollo.MutationHookOptions<FavoriteMarketMutation, FavoriteMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<FavoriteMarketMutation, FavoriteMarketMutationVariables>(FavoriteMarketDocument, options);
      }
export type FavoriteMarketMutationHookResult = ReturnType<typeof useFavoriteMarketMutation>;
export type FavoriteMarketMutationResult = Apollo.MutationResult<FavoriteMarketMutation>;
export type FavoriteMarketMutationOptions = Apollo.BaseMutationOptions<FavoriteMarketMutation, FavoriteMarketMutationVariables>;
export const GenerateCancelDeprecatedOceanOrderPayUrlDocument = gql`
    mutation GenerateCancelDeprecatedOceanOrderPayUrl($input: GenerateCancelDeprecatedOceanOrderPayUrlMutationInput!) {
  generateCancelDeprecatedOceanOrderPayUrl(input: $input)
}
    `;
export type GenerateCancelDeprecatedOceanOrderPayUrlMutationFn = Apollo.MutationFunction<GenerateCancelDeprecatedOceanOrderPayUrlMutation, GenerateCancelDeprecatedOceanOrderPayUrlMutationVariables>;

/**
 * __useGenerateCancelDeprecatedOceanOrderPayUrlMutation__
 *
 * To run a mutation, you first call `useGenerateCancelDeprecatedOceanOrderPayUrlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateCancelDeprecatedOceanOrderPayUrlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateCancelDeprecatedOceanOrderPayUrlMutation, { data, loading, error }] = useGenerateCancelDeprecatedOceanOrderPayUrlMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGenerateCancelDeprecatedOceanOrderPayUrlMutation(baseOptions?: Apollo.MutationHookOptions<GenerateCancelDeprecatedOceanOrderPayUrlMutation, GenerateCancelDeprecatedOceanOrderPayUrlMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<GenerateCancelDeprecatedOceanOrderPayUrlMutation, GenerateCancelDeprecatedOceanOrderPayUrlMutationVariables>(GenerateCancelDeprecatedOceanOrderPayUrlDocument, options);
      }
export type GenerateCancelDeprecatedOceanOrderPayUrlMutationHookResult = ReturnType<typeof useGenerateCancelDeprecatedOceanOrderPayUrlMutation>;
export type GenerateCancelDeprecatedOceanOrderPayUrlMutationResult = Apollo.MutationResult<GenerateCancelDeprecatedOceanOrderPayUrlMutation>;
export type GenerateCancelDeprecatedOceanOrderPayUrlMutationOptions = Apollo.BaseMutationOptions<GenerateCancelDeprecatedOceanOrderPayUrlMutation, GenerateCancelDeprecatedOceanOrderPayUrlMutationVariables>;
export const LoginWithTokenDocument = gql`
    mutation LoginWithToken($input: LoginWithTokenMutationInput!) {
  loginWithToken(input: $input) {
    name
    avatar
    mixinUuid
    inviteCode
    mayInvited
    invitor {
      mixinId
      mixinUuid
      name
    }
    fennec
  }
}
    `;
export type LoginWithTokenMutationFn = Apollo.MutationFunction<LoginWithTokenMutation, LoginWithTokenMutationVariables>;

/**
 * __useLoginWithTokenMutation__
 *
 * To run a mutation, you first call `useLoginWithTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginWithTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginWithTokenMutation, { data, loading, error }] = useLoginWithTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginWithTokenMutation(baseOptions?: Apollo.MutationHookOptions<LoginWithTokenMutation, LoginWithTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginWithTokenMutation, LoginWithTokenMutationVariables>(LoginWithTokenDocument, options);
      }
export type LoginWithTokenMutationHookResult = ReturnType<typeof useLoginWithTokenMutation>;
export type LoginWithTokenMutationResult = Apollo.MutationResult<LoginWithTokenMutation>;
export type LoginWithTokenMutationOptions = Apollo.BaseMutationOptions<LoginWithTokenMutation, LoginWithTokenMutationVariables>;
export const SwitchLocaleDocument = gql`
    mutation SwitchLocale($input: SwitchLocaleMutationInput!) {
  switchLocale(input: $input)
}
    `;
export type SwitchLocaleMutationFn = Apollo.MutationFunction<SwitchLocaleMutation, SwitchLocaleMutationVariables>;

/**
 * __useSwitchLocaleMutation__
 *
 * To run a mutation, you first call `useSwitchLocaleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSwitchLocaleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [switchLocaleMutation, { data, loading, error }] = useSwitchLocaleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSwitchLocaleMutation(baseOptions?: Apollo.MutationHookOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SwitchLocaleMutation, SwitchLocaleMutationVariables>(SwitchLocaleDocument, options);
      }
export type SwitchLocaleMutationHookResult = ReturnType<typeof useSwitchLocaleMutation>;
export type SwitchLocaleMutationResult = Apollo.MutationResult<SwitchLocaleMutation>;
export type SwitchLocaleMutationOptions = Apollo.BaseMutationOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>;
export const UnfavoriteMarketDocument = gql`
    mutation UnfavoriteMarket($input: UnfavoriteMarketMutationInput!) {
  unfavoriteMarket(input: $input) {
    id
    favorited
  }
}
    `;
export type UnfavoriteMarketMutationFn = Apollo.MutationFunction<UnfavoriteMarketMutation, UnfavoriteMarketMutationVariables>;

/**
 * __useUnfavoriteMarketMutation__
 *
 * To run a mutation, you first call `useUnfavoriteMarketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnfavoriteMarketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unfavoriteMarketMutation, { data, loading, error }] = useUnfavoriteMarketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUnfavoriteMarketMutation(baseOptions?: Apollo.MutationHookOptions<UnfavoriteMarketMutation, UnfavoriteMarketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnfavoriteMarketMutation, UnfavoriteMarketMutationVariables>(UnfavoriteMarketDocument, options);
      }
export type UnfavoriteMarketMutationHookResult = ReturnType<typeof useUnfavoriteMarketMutation>;
export type UnfavoriteMarketMutationResult = Apollo.MutationResult<UnfavoriteMarketMutation>;
export type UnfavoriteMarketMutationOptions = Apollo.BaseMutationOptions<UnfavoriteMarketMutation, UnfavoriteMarketMutationVariables>;
export const CurrentConversationDocument = gql`
    query CurrentConversation {
  currentConversation {
    id
    conversationId
    category
    name
    adminUuids
    creatorId
  }
}
    `;

/**
 * __useCurrentConversationQuery__
 *
 * To run a query within a React component, call `useCurrentConversationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentConversationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentConversationQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentConversationQuery(baseOptions?: Apollo.QueryHookOptions<CurrentConversationQuery, CurrentConversationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentConversationQuery, CurrentConversationQueryVariables>(CurrentConversationDocument, options);
      }
export function useCurrentConversationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentConversationQuery, CurrentConversationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentConversationQuery, CurrentConversationQueryVariables>(CurrentConversationDocument, options);
        }
export type CurrentConversationQueryHookResult = ReturnType<typeof useCurrentConversationQuery>;
export type CurrentConversationLazyQueryHookResult = ReturnType<typeof useCurrentConversationLazyQuery>;
export type CurrentConversationQueryResult = Apollo.QueryResult<CurrentConversationQuery, CurrentConversationQueryVariables>;
export const DeprecatedOceanOrdersDocument = gql`
    query DeprecatedOceanOrders {
  deprecatedOceanOrders {
    traceId
    orderType
    side
    price
    baseAsset {
      assetId
      symbol
      iconUrl
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
    }
    createdAt
  }
}
    `;

/**
 * __useDeprecatedOceanOrdersQuery__
 *
 * To run a query within a React component, call `useDeprecatedOceanOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useDeprecatedOceanOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDeprecatedOceanOrdersQuery({
 *   variables: {
 *   },
 * });
 */
export function useDeprecatedOceanOrdersQuery(baseOptions?: Apollo.QueryHookOptions<DeprecatedOceanOrdersQuery, DeprecatedOceanOrdersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DeprecatedOceanOrdersQuery, DeprecatedOceanOrdersQueryVariables>(DeprecatedOceanOrdersDocument, options);
      }
export function useDeprecatedOceanOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DeprecatedOceanOrdersQuery, DeprecatedOceanOrdersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DeprecatedOceanOrdersQuery, DeprecatedOceanOrdersQueryVariables>(DeprecatedOceanOrdersDocument, options);
        }
export type DeprecatedOceanOrdersQueryHookResult = ReturnType<typeof useDeprecatedOceanOrdersQuery>;
export type DeprecatedOceanOrdersLazyQueryHookResult = ReturnType<typeof useDeprecatedOceanOrdersLazyQuery>;
export type DeprecatedOceanOrdersQueryResult = Apollo.QueryResult<DeprecatedOceanOrdersQuery, DeprecatedOceanOrdersQueryVariables>;
export const GroupOwnerCommissionConnectionDocument = gql`
    query GroupOwnerCommissionConnection($after: String) {
  groupOwnerCommissionConnection(after: $after) {
    nodes {
      id
      amount
      transferType
      traceId
      snapshotId
      asset {
        name
        symbol
        iconUrl
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useGroupOwnerCommissionConnectionQuery__
 *
 * To run a query within a React component, call `useGroupOwnerCommissionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGroupOwnerCommissionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGroupOwnerCommissionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useGroupOwnerCommissionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<GroupOwnerCommissionConnectionQuery, GroupOwnerCommissionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GroupOwnerCommissionConnectionQuery, GroupOwnerCommissionConnectionQueryVariables>(GroupOwnerCommissionConnectionDocument, options);
      }
export function useGroupOwnerCommissionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GroupOwnerCommissionConnectionQuery, GroupOwnerCommissionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GroupOwnerCommissionConnectionQuery, GroupOwnerCommissionConnectionQueryVariables>(GroupOwnerCommissionConnectionDocument, options);
        }
export type GroupOwnerCommissionConnectionQueryHookResult = ReturnType<typeof useGroupOwnerCommissionConnectionQuery>;
export type GroupOwnerCommissionConnectionLazyQueryHookResult = ReturnType<typeof useGroupOwnerCommissionConnectionLazyQuery>;
export type GroupOwnerCommissionConnectionQueryResult = Apollo.QueryResult<GroupOwnerCommissionConnectionQuery, GroupOwnerCommissionConnectionQueryVariables>;
export const InvitationCommissionConnectionDocument = gql`
    query InvitationCommissionConnection($after: String) {
  invitationCommissionConnection(after: $after) {
    nodes {
      id
      amount
      transferType
      traceId
      snapshotId
      asset {
        name
        symbol
        iconUrl
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useInvitationCommissionConnectionQuery__
 *
 * To run a query within a React component, call `useInvitationCommissionConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useInvitationCommissionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInvitationCommissionConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useInvitationCommissionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<InvitationCommissionConnectionQuery, InvitationCommissionConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<InvitationCommissionConnectionQuery, InvitationCommissionConnectionQueryVariables>(InvitationCommissionConnectionDocument, options);
      }
export function useInvitationCommissionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InvitationCommissionConnectionQuery, InvitationCommissionConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<InvitationCommissionConnectionQuery, InvitationCommissionConnectionQueryVariables>(InvitationCommissionConnectionDocument, options);
        }
export type InvitationCommissionConnectionQueryHookResult = ReturnType<typeof useInvitationCommissionConnectionQuery>;
export type InvitationCommissionConnectionLazyQueryHookResult = ReturnType<typeof useInvitationCommissionConnectionLazyQuery>;
export type InvitationCommissionConnectionQueryResult = Apollo.QueryResult<InvitationCommissionConnectionQuery, InvitationCommissionConnectionQueryVariables>;
export const InviteeConnectionDocument = gql`
    query InviteeConnection($after: String) {
  inviteeConnection(after: $after) {
    nodes {
      name
      avatar
      mixinId
      mixinUuid
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useInviteeConnectionQuery__
 *
 * To run a query within a React component, call `useInviteeConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useInviteeConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInviteeConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useInviteeConnectionQuery(baseOptions?: Apollo.QueryHookOptions<InviteeConnectionQuery, InviteeConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<InviteeConnectionQuery, InviteeConnectionQueryVariables>(InviteeConnectionDocument, options);
      }
export function useInviteeConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InviteeConnectionQuery, InviteeConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<InviteeConnectionQuery, InviteeConnectionQueryVariables>(InviteeConnectionDocument, options);
        }
export type InviteeConnectionQueryHookResult = ReturnType<typeof useInviteeConnectionQuery>;
export type InviteeConnectionLazyQueryHookResult = ReturnType<typeof useInviteeConnectionLazyQuery>;
export type InviteeConnectionQueryResult = Apollo.QueryResult<InviteeConnectionQuery, InviteeConnectionQueryVariables>;
export const MarketConnectionDocument = gql`
    query MarketConnection($type: String!, $after: String, $query: String) {
  marketConnection(type: $type, after: $after, query: $query) {
    nodes {
      id
      priceCurrent
      change24h
      vol24h
      baseAsset {
        assetId
        symbol
        iconUrl
        changeUsd
        priceUsd
        chainAsset {
          iconUrl
        }
      }
      quoteAsset {
        assetId
        symbol
        iconUrl
        priceUsd
        chainAsset {
          iconUrl
        }
      }
      oceanMarketId
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMarketConnectionQuery__
 *
 * To run a query within a React component, call `useMarketConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMarketConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMarketConnectionQuery({
 *   variables: {
 *      type: // value for 'type'
 *      after: // value for 'after'
 *      query: // value for 'query'
 *   },
 * });
 */
export function useMarketConnectionQuery(baseOptions: Apollo.QueryHookOptions<MarketConnectionQuery, MarketConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MarketConnectionQuery, MarketConnectionQueryVariables>(MarketConnectionDocument, options);
      }
export function useMarketConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MarketConnectionQuery, MarketConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MarketConnectionQuery, MarketConnectionQueryVariables>(MarketConnectionDocument, options);
        }
export type MarketConnectionQueryHookResult = ReturnType<typeof useMarketConnectionQuery>;
export type MarketConnectionLazyQueryHookResult = ReturnType<typeof useMarketConnectionLazyQuery>;
export type MarketConnectionQueryResult = Apollo.QueryResult<MarketConnectionQuery, MarketConnectionQueryVariables>;
export const MarketDocument = gql`
    query Market($id: ID, $quoteAssetId: String, $baseAssetId: String) {
  market(id: $id, quoteAssetId: $quoteAssetId, baseAssetId: $baseAssetId) {
    id
    favorited
    priceCurrent
    change24h
    vol24h
    highPrice24h
    lowPrice24h
    baseAsset {
      assetId
      symbol
      iconUrl
      priceUsd
      changeUsd
      chainAsset {
        iconUrl
      }
      balance
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
      priceUsd
      chainAsset {
        iconUrl
      }
      balance
    }
    oceanMarketId
  }
}
    `;

/**
 * __useMarketQuery__
 *
 * To run a query within a React component, call `useMarketQuery` and pass it any options that fit your needs.
 * When your component renders, `useMarketQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMarketQuery({
 *   variables: {
 *      id: // value for 'id'
 *      quoteAssetId: // value for 'quoteAssetId'
 *      baseAssetId: // value for 'baseAssetId'
 *   },
 * });
 */
export function useMarketQuery(baseOptions?: Apollo.QueryHookOptions<MarketQuery, MarketQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MarketQuery, MarketQueryVariables>(MarketDocument, options);
      }
export function useMarketLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MarketQuery, MarketQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MarketQuery, MarketQueryVariables>(MarketDocument, options);
        }
export type MarketQueryHookResult = ReturnType<typeof useMarketQuery>;
export type MarketLazyQueryHookResult = ReturnType<typeof useMarketLazyQuery>;
export type MarketQueryResult = Apollo.QueryResult<MarketQuery, MarketQueryVariables>;
export const MixinAssetConnectionDocument = gql`
    query MixinAssetConnection($after: String, $query: String) {
  mixinAssetConnection(after: $after, query: $query) {
    nodes {
      assetId
      symbol
      iconUrl
      chainAsset {
        iconUrl
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMixinAssetConnectionQuery__
 *
 * To run a query within a React component, call `useMixinAssetConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMixinAssetConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMixinAssetConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *      query: // value for 'query'
 *   },
 * });
 */
export function useMixinAssetConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MixinAssetConnectionQuery, MixinAssetConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MixinAssetConnectionQuery, MixinAssetConnectionQueryVariables>(MixinAssetConnectionDocument, options);
      }
export function useMixinAssetConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MixinAssetConnectionQuery, MixinAssetConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MixinAssetConnectionQuery, MixinAssetConnectionQueryVariables>(MixinAssetConnectionDocument, options);
        }
export type MixinAssetConnectionQueryHookResult = ReturnType<typeof useMixinAssetConnectionQuery>;
export type MixinAssetConnectionLazyQueryHookResult = ReturnType<typeof useMixinAssetConnectionLazyQuery>;
export type MixinAssetConnectionQueryResult = Apollo.QueryResult<MixinAssetConnectionQuery, MixinAssetConnectionQueryVariables>;
export const OceanOrderConnectionDocument = gql`
    query OceanOrderConnection($marketId: ID, $after: String, $filter: String) {
  oceanOrderConnection(marketId: $marketId, after: $after, filter: $filter) {
    nodes {
      id
      traceId
      orderType
      side
      amount
      funds
      filledAmount
      filledFunds
      remainingAmount
      remainingFunds
      price
      state
      marketId
      createdAt
      baseAsset {
        assetId
        symbol
        iconUrl
        chainAsset {
          iconUrl
        }
      }
      quoteAsset {
        assetId
        symbol
        iconUrl
        chainAsset {
          iconUrl
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useOceanOrderConnectionQuery__
 *
 * To run a query within a React component, call `useOceanOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useOceanOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOceanOrderConnectionQuery({
 *   variables: {
 *      marketId: // value for 'marketId'
 *      after: // value for 'after'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useOceanOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<OceanOrderConnectionQuery, OceanOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OceanOrderConnectionQuery, OceanOrderConnectionQueryVariables>(OceanOrderConnectionDocument, options);
      }
export function useOceanOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OceanOrderConnectionQuery, OceanOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OceanOrderConnectionQuery, OceanOrderConnectionQueryVariables>(OceanOrderConnectionDocument, options);
        }
export type OceanOrderConnectionQueryHookResult = ReturnType<typeof useOceanOrderConnectionQuery>;
export type OceanOrderConnectionLazyQueryHookResult = ReturnType<typeof useOceanOrderConnectionLazyQuery>;
export type OceanOrderConnectionQueryResult = Apollo.QueryResult<OceanOrderConnectionQuery, OceanOrderConnectionQueryVariables>;
export const OceanOrderDocument = gql`
    query OceanOrder($id: ID!) {
  oceanOrder(id: $id) {
    id
    traceId
    orderType
    side
    amount
    funds
    filledAmount
    filledFunds
    remainingAmount
    remainingFunds
    price
    state
    marketId
    createdAt
    baseAsset {
      assetId
      symbol
      iconUrl
      chainAsset {
        iconUrl
      }
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
      chainAsset {
        iconUrl
      }
    }
  }
}
    `;

/**
 * __useOceanOrderQuery__
 *
 * To run a query within a React component, call `useOceanOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useOceanOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOceanOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useOceanOrderQuery(baseOptions: Apollo.QueryHookOptions<OceanOrderQuery, OceanOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OceanOrderQuery, OceanOrderQueryVariables>(OceanOrderDocument, options);
      }
export function useOceanOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OceanOrderQuery, OceanOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OceanOrderQuery, OceanOrderQueryVariables>(OceanOrderDocument, options);
        }
export type OceanOrderQueryHookResult = ReturnType<typeof useOceanOrderQuery>;
export type OceanOrderLazyQueryHookResult = ReturnType<typeof useOceanOrderLazyQuery>;
export type OceanOrderQueryResult = Apollo.QueryResult<OceanOrderQuery, OceanOrderQueryVariables>;
export const OceanSnapshotConnectionDocument = gql`
    query OceanSnapshotConnection($oceanOrderId: ID!) {
  oceanSnapshotConnection(oceanOrderId: $oceanOrderId) {
    nodes {
      id
      traceId
      snapshotType
      snapshotId
      amount
      transferredAt
      createdAt
      asset {
        assetId
        symbol
        iconUrl
        chainAsset {
          iconUrl
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useOceanSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useOceanSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useOceanSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOceanSnapshotConnectionQuery({
 *   variables: {
 *      oceanOrderId: // value for 'oceanOrderId'
 *   },
 * });
 */
export function useOceanSnapshotConnectionQuery(baseOptions: Apollo.QueryHookOptions<OceanSnapshotConnectionQuery, OceanSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OceanSnapshotConnectionQuery, OceanSnapshotConnectionQueryVariables>(OceanSnapshotConnectionDocument, options);
      }
export function useOceanSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OceanSnapshotConnectionQuery, OceanSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OceanSnapshotConnectionQuery, OceanSnapshotConnectionQueryVariables>(OceanSnapshotConnectionDocument, options);
        }
export type OceanSnapshotConnectionQueryHookResult = ReturnType<typeof useOceanSnapshotConnectionQuery>;
export type OceanSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useOceanSnapshotConnectionLazyQuery>;
export type OceanSnapshotConnectionQueryResult = Apollo.QueryResult<OceanSnapshotConnectionQuery, OceanSnapshotConnectionQueryVariables>;
export const UserAssetsDocument = gql`
    query UserAssets {
  userAssets {
    assetId
    name
    symbol
    iconUrl
    chainId
    balance
    balanceUsd
    priceUsd
    priceBtc
    changeUsd
    changeBtc
    chainAsset {
      iconUrl
    }
  }
}
    `;

/**
 * __useUserAssetsQuery__
 *
 * To run a query within a React component, call `useUserAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserAssetsQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserAssetsQuery(baseOptions?: Apollo.QueryHookOptions<UserAssetsQuery, UserAssetsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserAssetsQuery, UserAssetsQueryVariables>(UserAssetsDocument, options);
      }
export function useUserAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserAssetsQuery, UserAssetsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserAssetsQuery, UserAssetsQueryVariables>(UserAssetsDocument, options);
        }
export type UserAssetsQueryHookResult = ReturnType<typeof useUserAssetsQuery>;
export type UserAssetsLazyQueryHookResult = ReturnType<typeof useUserAssetsLazyQuery>;
export type UserAssetsQueryResult = Apollo.QueryResult<UserAssetsQuery, UserAssetsQueryVariables>;
export const UserSnapshotsDocument = gql`
    query UserSnapshots($offset: String, $asset: String, $opponent: String) {
  userSnapshots(offset: $offset, asset: $asset, opponent: $opponent) {
    amount
    traceId
    opponentId
    data
    asset {
      name
      symbol
      iconUrl
      chainAsset {
        iconUrl
      }
    }
    createdAt
  }
}
    `;

/**
 * __useUserSnapshotsQuery__
 *
 * To run a query within a React component, call `useUserSnapshotsQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserSnapshotsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserSnapshotsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      asset: // value for 'asset'
 *      opponent: // value for 'opponent'
 *   },
 * });
 */
export function useUserSnapshotsQuery(baseOptions?: Apollo.QueryHookOptions<UserSnapshotsQuery, UserSnapshotsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserSnapshotsQuery, UserSnapshotsQueryVariables>(UserSnapshotsDocument, options);
      }
export function useUserSnapshotsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserSnapshotsQuery, UserSnapshotsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserSnapshotsQuery, UserSnapshotsQueryVariables>(UserSnapshotsDocument, options);
        }
export type UserSnapshotsQueryHookResult = ReturnType<typeof useUserSnapshotsQuery>;
export type UserSnapshotsLazyQueryHookResult = ReturnType<typeof useUserSnapshotsLazyQuery>;
export type UserSnapshotsQueryResult = Apollo.QueryResult<UserSnapshotsQuery, UserSnapshotsQueryVariables>;